#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::too_many_arguments)]
/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const TARGET_ID: u32 = 823132164;
pub const __NVIC_PRIO_BITS: u32 = 2;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __MPU_PRESENT: u32 = 1;
pub const __SC000_REV: u32 = 1;
pub const __SC000_CMSIS_VERSION_MAIN: u32 = 3;
pub const __SC000_CMSIS_VERSION_SUB: u32 = 1;
pub const __SC000_CMSIS_VERSION: u32 = 196609;
pub const __CORTEX_SC: u32 = 0;
pub const __FPU_USED: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __NO_LONG_DOUBLE_MATH: u32 = 1;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 32;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967168;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SFCR_UNIBRTIMING_Pos: u32 = 0;
pub const SCB_SFCR_UNIBRTIMING_Msk: u32 = 32768;
pub const SCB_SFCR_SECKEY_Pos: u32 = 16;
pub const SCB_SFCR_SECKEY_Msk: u32 = 2147450880;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const SCnSCB_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const MPU_TYPE_IREGION_Pos: u32 = 16;
pub const MPU_TYPE_IREGION_Msk: u32 = 16711680;
pub const MPU_TYPE_DREGION_Pos: u32 = 8;
pub const MPU_TYPE_DREGION_Msk: u32 = 65280;
pub const MPU_TYPE_SEPARATE_Pos: u32 = 0;
pub const MPU_TYPE_SEPARATE_Msk: u32 = 1;
pub const MPU_CTRL_PRIVDEFENA_Pos: u32 = 2;
pub const MPU_CTRL_PRIVDEFENA_Msk: u32 = 4;
pub const MPU_CTRL_HFNMIENA_Pos: u32 = 1;
pub const MPU_CTRL_HFNMIENA_Msk: u32 = 2;
pub const MPU_CTRL_ENABLE_Pos: u32 = 0;
pub const MPU_CTRL_ENABLE_Msk: u32 = 1;
pub const MPU_RNR_REGION_Pos: u32 = 0;
pub const MPU_RNR_REGION_Msk: u32 = 255;
pub const MPU_RBAR_ADDR_Pos: u32 = 8;
pub const MPU_RBAR_ADDR_Msk: u32 = 4294967040;
pub const MPU_RBAR_VALID_Pos: u32 = 4;
pub const MPU_RBAR_VALID_Msk: u32 = 16;
pub const MPU_RBAR_REGION_Pos: u32 = 0;
pub const MPU_RBAR_REGION_Msk: u32 = 15;
pub const MPU_RASR_ATTRS_Pos: u32 = 16;
pub const MPU_RASR_ATTRS_Msk: u32 = 4294901760;
pub const MPU_RASR_XN_Pos: u32 = 28;
pub const MPU_RASR_XN_Msk: u32 = 268435456;
pub const MPU_RASR_AP_Pos: u32 = 24;
pub const MPU_RASR_AP_Msk: u32 = 117440512;
pub const MPU_RASR_TEX_Pos: u32 = 19;
pub const MPU_RASR_TEX_Msk: u32 = 3670016;
pub const MPU_RASR_S_Pos: u32 = 18;
pub const MPU_RASR_S_Msk: u32 = 262144;
pub const MPU_RASR_C_Pos: u32 = 17;
pub const MPU_RASR_C_Msk: u32 = 131072;
pub const MPU_RASR_B_Pos: u32 = 16;
pub const MPU_RASR_B_Msk: u32 = 65536;
pub const MPU_RASR_SRD_Pos: u32 = 8;
pub const MPU_RASR_SRD_Msk: u32 = 65280;
pub const MPU_RASR_SIZE_Pos: u32 = 1;
pub const MPU_RASR_SIZE_Msk: u32 = 62;
pub const MPU_RASR_ENABLE_Pos: u32 = 0;
pub const MPU_RASR_ENABLE_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const ENDORSEMENT_MAX_ASN1_LENGTH: u32 = 72;
pub const OS_PARSE_BERTLV_OFFSET_COMPARE_WITH_BUFFER: u32 = 2147483648;
pub const OS_PARSE_BERTLV_OFFSET_GET_LENGTH: u32 = 1073741824;
pub const APPLICATION_FLAG_MAIN: u32 = 1;
pub const APPLICATION_FLAG_BOLOS_UPGRADE: u32 = 2;
pub const APPLICATION_FLAG_SIGNED: u32 = 4;
pub const APPLICATION_FLAG_BOLOS_UX: u32 = 8;
pub const APPLICATION_FLAG_DERIVE_MASTER: u32 = 16;
pub const APPLICATION_FLAG_SHARED_NVRAM: u32 = 32;
pub const APPLICATION_FLAG_GLOBAL_PIN: u32 = 64;
pub const APPLICATION_FLAG_DEBUG: u32 = 128;
pub const APPLICATION_FLAG_AUTOBOOT: u32 = 256;
pub const APPLICATION_FLAG_BOLOS_SETTINGS: u32 = 512;
pub const APPLICATION_FLAG_CUSTOM_CA: u32 = 1024;
pub const APPLICATION_FLAG_LIBRARY: u32 = 2048;
pub const APPLICATION_FLAG_NO_RUN: u32 = 4096;
pub const APPLICATION_FLAG_ISSUER: u32 = 16384;
pub const APPLICATION_FLAG_ENABLED: u32 = 32768;
pub const APPLICATION_FLAG_AEM_PIN: u32 = 8;
pub const APPLICATION_FLAG_NEG_MASK: u32 = 4294901760;
pub const BOLOS_TRUE: u32 = 170;
pub const BOLOS_FALSE: u32 = 85;
pub const BOLOS_UX_OK: u32 = 170;
pub const BOLOS_UX_CANCEL: u32 = 85;
pub const BOLOS_UX_ERROR: u32 = 214;
pub const BOLOS_UX_IGNORE: u32 = 151;
pub const BOLOS_UX_REDRAW: u32 = 105;
pub const BOLOS_UX_CONTINUE: u32 = 0;
pub const OS_FLAG_RECOVERY: u32 = 1;
pub const OS_FLAG_SIGNED_MCU_CODE: u32 = 2;
pub const OS_FLAG_ONBOARDED: u32 = 4;
pub const OS_FLAG_PIN_VALIDATED: u32 = 128;
pub const IMPL_IO_APDU_BUFFER_SIZE: u32 = 260;
pub const IO_APDU_BUFFER_SIZE: u32 = 260;
pub const CHANNEL_APDU: u32 = 0;
pub const CHANNEL_KEYBOARD: u32 = 1;
pub const CHANNEL_SPI: u32 = 2;
pub const IO_RESET_AFTER_REPLIED: u32 = 128;
pub const IO_RECEIVE_DATA: u32 = 64;
pub const IO_RETURN_AFTER_TX: u32 = 32;
pub const IO_ASYNCH_REPLY: u32 = 16;
pub const IO_FINISHED: u32 = 8;
pub const IO_FLAGS: u32 = 248;
pub const USB_SEGMENT_SIZE: u32 = 50;
pub const BLE_SEGMENT_SIZE: u32 = 50;
pub const NVM_ERASED_WORD_VALUE: u32 = 4294967295;
pub const DEFAULT_PIN_RETRIES: u32 = 3;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const CX_OK: u32 = 0;
pub const CX_CARRY: u32 = 4294967073;
pub const CX_LOCKED: u32 = 4294967169;
pub const CX_UNLOCKED: u32 = 4294967170;
pub const CX_NOT_LOCKED: u32 = 4294967171;
pub const CX_NOT_UNLOCKED: u32 = 4294967172;
pub const CX_INTERNAL_ERROR: u32 = 4294967173;
pub const CX_INVALID_PARAMETER_SIZE: u32 = 4294967174;
pub const CX_INVALID_PARAMETER_VALUE: u32 = 4294967175;
pub const CX_INVALID_PARAMETER: u32 = 4294967176;
pub const CX_NOT_INVERTIBLE: u32 = 4294967177;
pub const CX_OVERFLOW: u32 = 4294967178;
pub const CX_MEMORY_FULL: u32 = 4294967179;
pub const CX_NO_RESIDUE: u32 = 4294967180;
pub const CX_EC_INFINITE_POINT: u32 = 4294967105;
pub const CX_EC_INVALID_POINT: u32 = 4294967202;
pub const CX_EC_INVALID_CURVE: u32 = 4294967203;
pub const BOLOS_APPNAME_MAX_SIZE_B: u32 = 32;
pub const BOLOS_APPVERSION_MAX_SIZE_B: u32 = 16;
pub const BOLOS_TAG_APPNAME: u32 = 1;
pub const BOLOS_TAG_APPVERSION: u32 = 2;
pub const BOLOS_TAG_ICON: u32 = 3;
pub const BOLOS_TAG_DERIVEPATH: u32 = 4;
pub const BOLOS_TAG_DATA_SIZE: u32 = 5;
pub const BOLOS_TAG_DEPENDENCY: u32 = 6;
pub const BOLOS_TAG_USER_TAG: u32 = 32;
pub const OS_REGISTRY_GET_TAG_OFFSET_COMPARE_WITH_BUFFER: u32 = 2147483648;
pub const OS_REGISTRY_GET_TAG_OFFSET_GET_LENGTH: u32 = 1073741824;
pub const ERR_IOL_RANGE: u32 = 4096;
pub const ERR_TSK_RANGE: u32 = 8192;
pub const ERR_CRY_RANGE: u32 = 12288;
pub const ERR_PAR_RANGE: u32 = 16384;
pub const ERR_SEC_RANGE: u32 = 20480;
pub const ERR_APD_RANGE: u32 = 24576;
pub const ERR_MUI_RANGE: u32 = 40960;
pub const ERR_APP_RANGE_01: u32 = 45056;
pub const ERR_APP_RANGE_02: u32 = 49152;
pub const ERR_APP_RANGE_03: u32 = 53248;
pub const ERR_APP_RANGE_04: u32 = 57344;
pub const ERR_GEN_SUB_01: u32 = 256;
pub const ERR_GEN_SUB_02: u32 = 512;
pub const ERR_GEN_SUB_03: u32 = 768;
pub const ERR_GEN_SUB_04: u32 = 1024;
pub const ERR_GEN_SUB_05: u32 = 1280;
pub const ERR_GEN_SUB_06: u32 = 1536;
pub const ERR_GEN_SUB_07: u32 = 1792;
pub const ERR_GEN_SUB_08: u32 = 2048;
pub const ERR_GEN_SUB_09: u32 = 2304;
pub const ERR_GEN_SUB_0D: u32 = 3328;
pub const ERR_GEN_SUB_0E: u32 = 3584;
pub const ERR_IOL_OFW: u32 = 4352;
pub const ERR_IOL_HDR: u32 = 4608;
pub const ERR_IOL_STA: u32 = 4864;
pub const ERR_IOL_RST: u32 = 5120;
pub const ERR_TSK_STC: u32 = 8448;
pub const ERR_TSK_OWN: u32 = 8704;
pub const ERR_TSK_OFW: u32 = 8960;
pub const ERR_CRY_LEN: u32 = 12544;
pub const ERR_CRY_VAL: u32 = 12800;
pub const ERR_PAR_LEN: u32 = 16640;
pub const ERR_PAR_VAL: u32 = 16896;
pub const ERR_SEC_APP: u32 = 20736;
pub const ERR_SEC_CRC: u32 = 20992;
pub const ERR_SEC_CHK: u32 = 21248;
pub const ERR_SEC_KEY: u32 = 21504;
pub const ERR_SEC_PIN: u32 = 21760;
pub const ERR_SEC_SCP: u32 = 22016;
pub const ERR_SEC_SIG: u32 = 22272;
pub const ERR_SEC_MEM: u32 = 22528;
pub const ERR_SEC_STA: u32 = 22784;
pub const ERR_APD_CLA: u32 = 28160;
pub const ERR_APD_INS: u32 = 27904;
pub const ERR_APD_HDR: u32 = 25856;
pub const ERR_APD_STA: u32 = 26112;
pub const ERR_APD_LEN: u32 = 26368;
pub const ERR_APD_DAT: u32 = 26624;
pub const SWO_SUCCESS: u32 = 36864;
pub const EXCEPTION: u32 = 1;
pub const INVALID_PARAMETER: u32 = 2;
pub const EXCEPTION_SECURITY: u32 = 3;
pub const INVALID_STATE: u32 = 4;
pub const EXCEPTION_IO_RESET: u32 = 5;
pub const NOT_ENOUGH_SPACE: u32 = 6;
pub const EXCEPTION_OVERFLOW: u32 = 7;
pub const INVALID_CRC: u32 = 8;
pub const INVALID_CHECKSUM: u32 = 9;
pub const INVALID_COUNTER: u32 = 10;
pub const NOT_SUPPORTED: u32 = 11;
pub const TIMEOUT: u32 = 12;
pub const EXCEPTION_PIC: u32 = 13;
pub const EXCEPTION_APPEXIT: u32 = 14;
pub const EXCEPTION_IO_OVERFLOW: u32 = 15;
pub const EXCEPTION_IO_HEADER: u32 = 16;
pub const EXCEPTION_IO_STATE: u32 = 17;
pub const EXCEPTION_CXPORT: u32 = 18;
pub const EXCEPTION_SYSTEM: u32 = 19;
pub const CX_LAST: u32 = 1;
pub const CX_SIG_MODE: u32 = 2;
pub const CX_MASK_SIGCRYPT: u32 = 6;
pub const CX_ENCRYPT: u32 = 4;
pub const CX_DECRYPT: u32 = 0;
pub const CX_SIGN: u32 = 6;
pub const CX_VERIFY: u32 = 2;
pub const CX_MASK_PAD: u32 = 56;
pub const CX_PAD_NONE: u32 = 0;
pub const CX_PAD_ISO9797M1: u32 = 8;
pub const CX_PAD_ISO9797M2: u32 = 16;
pub const CX_PAD_PKCS1_1o5: u32 = 24;
pub const CX_PAD_PKCS1_PSS: u32 = 32;
pub const CX_PAD_PKCS1_OAEP: u32 = 40;
pub const CX_MASK_CHAIN: u32 = 448;
pub const CX_CHAIN_ECB: u32 = 0;
pub const CX_CHAIN_CBC: u32 = 64;
pub const CX_CHAIN_CTR: u32 = 128;
pub const CX_CHAIN_CFB: u32 = 192;
pub const CX_CHAIN_OFB: u32 = 256;
pub const CX_MASK_ECC_VARIANT: u32 = 448;
pub const CX_NO_CANONICAL: u32 = 64;
pub const CX_MASK_RND: u32 = 3584;
pub const CX_RND_PRNG: u32 = 512;
pub const CX_RND_TRNG: u32 = 1024;
pub const CX_RND_RFC6979: u32 = 1536;
pub const CX_RND_PROVIDED: u32 = 2048;
pub const CX_MASK_EC: u32 = 28672;
pub const CX_ECDH_POINT: u32 = 4096;
pub const CX_ECDH_X: u32 = 8192;
pub const CX_ECSCHNORR_ISO14888_XY: u32 = 12288;
pub const CX_ECSCHNORR_ISO14888_X: u32 = 16384;
pub const CX_ECSCHNORR_BSI03111: u32 = 20480;
pub const CX_ECSCHNORR_LIBSECP: u32 = 24576;
pub const CX_ECSCHNORR_Z: u32 = 28672;
pub const CX_NO_REINIT: u32 = 32768;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const CX_HASH_MAX_BLOCK_COUNT: u32 = 65535;
pub const CX_BN_WORD_ALIGNEMENT: u32 = 16;
pub const CX_BN_FLAG_UNSET: u32 = 128;
pub const CX_MAX_DOMAIN_LENGTH: u32 = 66;
pub const CX_ECCINFO_PARITY_ODD: u32 = 1;
pub const CX_ECCINFO_xGTn: u32 = 2;
pub const BOLOS_UX_ONBOARDING_ALGORITHM_BIP39: u32 = 1;
pub const BOLOS_UX_ONBOARDING_ALGORITHM_ELECTRUM: u32 = 2;
pub const HDW_NORMAL: u32 = 0;
pub const HDW_ED25519_SLIP10: u32 = 1;
pub const HDW_SLIP21: u32 = 2;
pub const CX_APILEVEL: u32 = 12;
pub const CX_COMPAT_APILEVEL: u32 = 12;
pub const CXPORT_ED_DES: u32 = 1;
pub const CXPORT_ED_AES: u32 = 2;
pub const CXPORT_ED_RSA: u32 = 4;
pub const SYSCALL_get_api_level_ID_IN: u32 = 1610613048;
pub const SYSCALL_halt_ID_IN: u32 = 1610613308;
pub const SYSCALL_nvm_write_ID_IN: u32 = 1610613631;
pub const SYSCALL_nvm_erase_ID_IN: u32 = 1610686760;
pub const SYSCALL_cx_aes_set_key_hw_ID_IN: u32 = 1610658504;
pub const SYSCALL_cx_aes_reset_hw_ID_IN: u32 = 1610658626;
pub const SYSCALL_cx_aes_block_hw_ID_IN: u32 = 1610658830;
pub const SYSCALL_cx_des_set_key_hw_ID_IN: u32 = 1610657665;
pub const SYSCALL_cx_des_reset_hw_ID_IN: u32 = 1610658021;
pub const SYSCALL_cx_des_block_hw_ID_IN: u32 = 1610658192;
pub const SYSCALL_cx_bn_lock_ID_IN: u32 = 1610683121;
pub const SYSCALL_cx_bn_unlock_ID_IN: u32 = 1610659351;
pub const SYSCALL_cx_bn_is_locked_ID_IN: u32 = 1610659666;
pub const SYSCALL_cx_bn_alloc_ID_IN: u32 = 1610683196;
pub const SYSCALL_cx_bn_alloc_init_ID_IN: u32 = 1610683597;
pub const SYSCALL_cx_bn_destroy_ID_IN: u32 = 1610660961;
pub const SYSCALL_cx_bn_nbytes_ID_IN: u32 = 1610681643;
pub const SYSCALL_cx_bn_init_ID_IN: u32 = 1610683685;
pub const SYSCALL_cx_bn_rand_ID_IN: u32 = 1610672868;
pub const SYSCALL_cx_bn_copy_ID_IN: u32 = 1610661913;
pub const SYSCALL_cx_bn_set_u32_ID_IN: u32 = 1610662294;
pub const SYSCALL_cx_bn_get_u32_ID_IN: u32 = 1610672970;
pub const SYSCALL_cx_bn_export_ID_IN: u32 = 1610662746;
pub const SYSCALL_cx_bn_cmp_ID_IN: u32 = 1610662941;
pub const SYSCALL_cx_bn_cmp_u32_ID_IN: u32 = 1610663379;
pub const SYSCALL_cx_bn_is_odd_ID_IN: u32 = 1610684598;
pub const SYSCALL_cx_bn_xor_ID_IN: u32 = 1610664188;
pub const SYSCALL_cx_bn_or_ID_IN: u32 = 1610664423;
pub const SYSCALL_cx_bn_and_ID_IN: u32 = 1610664671;
pub const SYSCALL_cx_bn_tst_bit_ID_IN: u32 = 1610664768;
pub const SYSCALL_cx_bn_set_bit_ID_IN: u32 = 1610665207;
pub const SYSCALL_cx_bn_clr_bit_ID_IN: u32 = 1610665392;
pub const SYSCALL_cx_bn_shr_ID_IN: u32 = 1610665524;
pub const SYSCALL_cx_bn_shl_ID_IN: u32 = 1610685524;
pub const SYSCALL_cx_bn_cnt_bits_ID_IN: u32 = 1610673184;
pub const SYSCALL_cx_bn_add_ID_IN: u32 = 1610684692;
pub const SYSCALL_cx_bn_sub_ID_IN: u32 = 1610685120;
pub const SYSCALL_cx_bn_mul_ID_IN: u32 = 1610666655;
pub const SYSCALL_cx_bn_mod_add_ID_IN: u32 = 1610666754;
pub const SYSCALL_cx_bn_mod_sub_ID_IN: u32 = 1610667125;
pub const SYSCALL_cx_bn_mod_mul_ID_IN: u32 = 1610667421;
pub const SYSCALL_cx_bn_reduce_ID_IN: u32 = 1610667534;
pub const SYSCALL_cx_bn_mod_sqrt_ID_IN: u32 = 1610685805;
pub const SYSCALL_cx_bn_mod_pow_bn_ID_IN: u32 = 1610667966;
pub const SYSCALL_cx_bn_mod_pow_ID_IN: u32 = 1610673553;
pub const SYSCALL_cx_bn_mod_pow2_ID_IN: u32 = 1610673832;
pub const SYSCALL_cx_bn_mod_invert_nprime_ID_IN: u32 = 1610668782;
pub const SYSCALL_cx_bn_mod_u32_invert_ID_IN: u32 = 1610684151;
pub const SYSCALL_cx_mont_alloc_ID_IN: u32 = 1610669094;
pub const SYSCALL_cx_mont_init_ID_IN: u32 = 1610669393;
pub const SYSCALL_cx_mont_init2_ID_IN: u32 = 1610669593;
pub const SYSCALL_cx_mont_to_montgomery_ID_IN: u32 = 1610669894;
pub const SYSCALL_cx_mont_from_montgomery_ID_IN: u32 = 1610670232;
pub const SYSCALL_cx_mont_mul_ID_IN: u32 = 1610670414;
pub const SYSCALL_cx_mont_pow_ID_IN: u32 = 1610670812;
pub const SYSCALL_cx_mont_pow_bn_ID_IN: u32 = 1610670860;
pub const SYSCALL_cx_mont_invert_nprime_ID_IN: u32 = 1610671282;
pub const SYSCALL_cx_bn_is_prime_ID_IN: u32 = 1610674027;
pub const SYSCALL_cx_bn_next_prime_ID_IN: u32 = 1610674288;
pub const SYSCALL_cx_bn_rng_ID_IN: u32 = 1610734972;
pub const SYSCALL_cx_ecdomain_size_ID_IN: u32 = 1610690052;
pub const SYSCALL_cx_ecdomain_parameters_length_ID_IN: u32 = 1610690484;
pub const SYSCALL_cx_ecdomain_parameter_ID_IN: u32 = 1610690671;
pub const SYSCALL_cx_ecdomain_parameter_bn_ID_IN: u32 = 1610690962;
pub const SYSCALL_cx_ecdomain_generator_ID_IN: u32 = 1610691300;
pub const SYSCALL_cx_ecdomain_generator_bn_ID_IN: u32 = 1610691521;
pub const SYSCALL_cx_ecpoint_alloc_ID_IN: u32 = 1610674646;
pub const SYSCALL_cx_ecpoint_destroy_ID_IN: u32 = 1610674894;
pub const SYSCALL_cx_ecpoint_init_ID_IN: u32 = 1610675049;
pub const SYSCALL_cx_ecpoint_init_bn_ID_IN: u32 = 1610675373;
pub const SYSCALL_cx_ecpoint_export_ID_IN: u32 = 1610675641;
pub const SYSCALL_cx_ecpoint_export_bn_ID_IN: u32 = 1610675948;
pub const SYSCALL_cx_ecpoint_compress_ID_IN: u32 = 1610689767;
pub const SYSCALL_cx_ecpoint_decompress_ID_IN: u32 = 1610689858;
pub const SYSCALL_cx_ecpoint_add_ID_IN: u32 = 1610681858;
pub const SYSCALL_cx_ecpoint_neg_ID_IN: u32 = 1610682135;
pub const SYSCALL_cx_ecpoint_scalarmul_ID_IN: u32 = 1610682428;
pub const SYSCALL_cx_ecpoint_scalarmul_bn_ID_IN: u32 = 1610682864;
pub const SYSCALL_cx_ecpoint_rnd_scalarmul_ID_IN: u32 = 1610688333;
pub const SYSCALL_cx_ecpoint_rnd_scalarmul_bn_ID_IN: u32 = 1610688649;
pub const SYSCALL_cx_ecpoint_double_scalarmul_ID_IN: u32 = 1610696872;
pub const SYSCALL_cx_ecpoint_double_scalarmul_bn_ID_IN: u32 = 1610697373;
pub const SYSCALL_cx_ecpoint_cmp_ID_IN: u32 = 1610677189;
pub const SYSCALL_cx_ecpoint_is_on_curve_ID_IN: u32 = 1610677445;
pub const SYSCALL_cx_ecpoint_is_at_infinity_ID_IN: u32 = 1610697643;
pub const SYSCALL_cx_crc32_hw_ID_IN: u32 = 1610678897;
pub const SYSCALL_cx_get_random_bytes_ID_IN: u32 = 1610680181;
pub const SYSCALL_cx_trng_get_random_data_ID_IN: u32 = 1610679926;
pub const SYSCALL_os_perso_erase_all_ID_IN: u32 = 1610632181;
pub const SYSCALL_os_perso_set_seed_ID_IN: u32 = 1610632892;
pub const SYSCALL_os_perso_derive_and_set_seed_ID_IN: u32 = 1610633149;
pub const SYSCALL_os_perso_set_words_ID_IN: u32 = 1610633240;
pub const SYSCALL_os_perso_finalize_ID_IN: u32 = 1610633600;
pub const SYSCALL_os_perso_isonboarded_ID_IN: u32 = 1610653519;
pub const SYSCALL_os_perso_derive_node_bip32_ID_IN: u32 = 1610634170;
pub const SYSCALL_os_perso_derive_node_with_seed_key_ID_IN: u32 = 1610655448;
pub const SYSCALL_os_perso_derive_eip2333_ID_IN: u32 = 1610655568;
pub const SYSCALL_os_perso_seed_cookie_ID_IN: u32 = 1610655996;
pub const SYSCALL_os_endorsement_get_code_hash_ID_IN: u32 = 1610634511;
pub const SYSCALL_os_endorsement_get_public_key_ID_IN: u32 = 1610634995;
pub const SYSCALL_os_endorsement_get_public_key_certificate_ID_IN: u32 = 1610635084;
pub const SYSCALL_os_endorsement_key1_get_app_secret_ID_IN: u32 = 1610635356;
pub const SYSCALL_os_endorsement_key1_sign_data_ID_IN: u32 = 1610635736;
pub const SYSCALL_os_endorsement_key2_derive_sign_data_ID_IN: u32 = 1610635850;
pub const SYSCALL_os_perso_set_pin_ID_IN: u32 = 1610632415;
pub const SYSCALL_os_perso_set_current_identity_pin_ID_IN: u32 = 1610632702;
pub const SYSCALL_os_global_pin_is_validated_ID_IN: u32 = 1610653756;
pub const SYSCALL_os_global_pin_check_ID_IN: u32 = 1610653954;
pub const SYSCALL_os_global_pin_invalidate_ID_IN: u32 = 1610636752;
pub const SYSCALL_os_global_pin_retries_ID_IN: u32 = 1610636889;
pub const SYSCALL_os_registry_count_ID_IN: u32 = 1610637120;
pub const SYSCALL_os_registry_get_ID_IN: u32 = 1610687075;
pub const SYSCALL_os_ux_ID_IN: u32 = 1610638424;
pub const SYSCALL_os_ux_result_ID_IN: u32 = 1610638592;
pub const SYSCALL_os_lib_call_ID_IN: u32 = 1610639117;
pub const SYSCALL_os_lib_end_ID_IN: u32 = 1610639501;
pub const SYSCALL_os_flags_ID_IN: u32 = 1610639982;
pub const SYSCALL_os_version_ID_IN: u32 = 1610640312;
pub const SYSCALL_os_serial_ID_IN: u32 = 1610640563;
pub const SYSCALL_os_seph_features_ID_IN: u32 = 1610641110;
pub const SYSCALL_os_seph_version_ID_IN: u32 = 1610641324;
pub const SYSCALL_os_bootloader_version_ID_IN: u32 = 1610642349;
pub const SYSCALL_os_setting_get_ID_IN: u32 = 1610641605;
pub const SYSCALL_os_setting_set_ID_IN: u32 = 1610641814;
pub const SYSCALL_os_get_memory_info_ID_IN: u32 = 1610642019;
pub const SYSCALL_os_registry_get_tag_ID_IN: u32 = 1610687344;
pub const SYSCALL_os_registry_get_current_app_tag_ID_IN: u32 = 1610642644;
pub const SYSCALL_os_registry_delete_app_and_dependees_ID_IN: u32 = 1610687659;
pub const SYSCALL_os_registry_delete_all_apps_ID_IN: u32 = 1610687912;
pub const SYSCALL_os_sched_exec_ID_IN: u32 = 1610688239;
pub const SYSCALL_os_sched_exit_ID_IN: u32 = 1610652350;
pub const SYSCALL_os_sched_is_running_ID_IN: u32 = 1610652634;
pub const SYSCALL_os_sched_create_ID_IN: u32 = 1610685208;
pub const SYSCALL_os_sched_kill_ID_IN: u32 = 1610643672;
pub const SYSCALL_io_seph_send_ID_IN: u32 = 1610646401;
pub const SYSCALL_io_seph_is_status_sent_ID_IN: u32 = 1610646715;
pub const SYSCALL_io_seph_recv_ID_IN: u32 = 1610647012;
pub const SYSCALL_nvm_write_page_ID_IN: u32 = 1610680896;
pub const SYSCALL_nvm_erase_page_ID_IN: u32 = 1610692324;
pub const SYSCALL_try_context_get_ID_IN: u32 = 1610647473;
pub const SYSCALL_try_context_set_ID_IN: u32 = 1610681094;
pub const SYSCALL_os_sched_last_status_ID_IN: u32 = 1610652811;
pub const SYSCALL_os_sched_yield_ID_IN: u32 = 1610653118;
pub const SYSCALL_os_sched_switch_ID_IN: u32 = 1610653213;
pub const SYSCALL_os_sched_current_task_ID_IN: u32 = 1610648401;
pub const SYSCALL_os_mpu_protect_ram_ID_IN: u32 = 1610648898;
pub const SYSCALL_os_mpu_protect_flash_ID_IN: u32 = 1610649335;
pub const SYSCALL_os_allow_protected_flash_ID_IN: u32 = 1610649500;
pub const SYSCALL_os_deny_protected_flash_ID_IN: u32 = 1610649908;
pub const SYSCALL_os_allow_protected_ram_ID_IN: u32 = 1610650217;
pub const SYSCALL_os_deny_protected_ram_ID_IN: u32 = 1610650601;
pub const SYSCALL_os_customca_verify_ID_IN: u32 = 1610649697;
pub const SYSCALL_PARAMETER_ARRAY_MAX_LEN: u32 = 11;
pub const BLE_CMD_APDU: u32 = 5;
pub const BLE_CHUNK_LENGTH: u32 = 20;
pub const M24SR_CHUNK_LENGTH: u32 = 246;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT: u32 = 1;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_REQBLE: u32 = 1;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_RECOVERY: u32 = 2;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_USB: u32 = 1;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_BLE: u32 = 2;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_TOUCH: u32 = 4;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_BUTTON_COUNT: u32 = 240;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_BUTTON_COUNT_POS: u32 = 4;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_SCREEN_MASK: u32 = 3840;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_NO_SCREEN: u32 = 0;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_SCREEN_BIG: u32 = 256;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_SCREEN_SML: u32 = 512;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_LEDRGB: u32 = 4096;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_BATTERY: u32 = 8;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_ISET_MASK: u32 = 4026531840;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_ISET_BASIC: u32 = 0;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_ISET_MCUSEC: u32 = 268435456;
pub const SEPROXYHAL_TAG_SESSION_START_EVENT_FEATURE_ISET_MCUBL: u32 = 536870912;
pub const SEPROXYHAL_TAG_BLE_SECURITY_DB_EVENT: u32 = 2;
pub const SEPROXYHAL_TAG_BLE_SECURITY_DB_LOADED_EVENT: u32 = 0;
pub const SEPROXYHAL_TAG_BLE_SECURITY_DB_DUMP_EVENT: u32 = 1;
pub const SEPROXYHAL_TAG_BLE_WRITE_REQUEST_EVENT: u32 = 3;
pub const SEPROXYHAL_TAG_BLE_READ_REQUEST_EVENT: u32 = 4;
pub const SEPROXYHAL_TAG_BUTTON_PUSH_EVENT: u32 = 5;
pub const SEPROXYHAL_TAG_BUTTON_PUSH_ID_MASK: u32 = 254;
pub const SEPROXYHAL_TAG_BUTTON_PUSH_INTERVAL_MS: u32 = 100;
pub const SEPROXYHAL_TAG_NFC_FIELD_DETECTION_EVENT: u32 = 6;
pub const SEPROXYHAL_TAG_NFC_APDU_RECEIVED_EVENT: u32 = 7;
pub const SEPROXYHAL_TAG_BATTERY_NOTIFICATION_EVENT: u32 = 8;
pub const SEPROXYHAL_TAG_M24SR_GPO_CHANGE_EVENT: u32 = 9;
pub const SEPROXYHAL_TAG_M24SR_RESPONSE_APDU_EVENT: u32 = 10;
pub const SEPROXYHAL_TAG_BLE_NOTIFY_INDICATE_EVENT: u32 = 11;
pub const SEPROXYHAL_TAG_FINGER_EVENT: u32 = 12;
pub const SEPROXYHAL_TAG_FINGER_EVENT_TOUCH: u32 = 1;
pub const SEPROXYHAL_TAG_FINGER_EVENT_RELEASE: u32 = 2;
pub const SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT: u32 = 13;
pub const SEPROXYHAL_TAG_TICKER_EVENT: u32 = 14;
pub const SEPROXYHAL_TAG_USB_EVENT: u32 = 15;
pub const SEPROXYHAL_TAG_USB_EVENT_RESET: u32 = 1;
pub const SEPROXYHAL_TAG_USB_EVENT_SOF: u32 = 2;
pub const SEPROXYHAL_TAG_USB_EVENT_SUSPENDED: u32 = 4;
pub const SEPROXYHAL_TAG_USB_EVENT_RESUMED: u32 = 8;
pub const SEPROXYHAL_TAG_USB_EP_XFER_EVENT: u32 = 16;
pub const SEPROXYHAL_TAG_USB_EP_XFER_SETUP: u32 = 1;
pub const SEPROXYHAL_TAG_USB_EP_XFER_IN: u32 = 2;
pub const SEPROXYHAL_TAG_USB_EP_XFER_OUT: u32 = 4;
pub const SEPROXYHAL_TAG_BLE_CONNECTION_EVENT: u32 = 17;
pub const SEPROXYHAL_TAG_UNSEC_CHUNK_EVENT: u32 = 18;
pub const SEPROXYHAL_TAG_ACK_LINK_SPEED: u32 = 19;
pub const SEPROXYHAL_TAG_BLUENRG_RECV_EVENT: u32 = 20;
pub const SEPROXYHAL_TAG_STATUS_EVENT: u32 = 21;
pub const SEPROXYHAL_TAG_STATUS_EVENT_FLAG_CHARGING: u32 = 1;
pub const SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_ON: u32 = 2;
pub const SEPROXYHAL_TAG_STATUS_EVENT_FLAG_BLE_ON: u32 = 4;
pub const SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED: u32 = 8;
pub const SEPROXYHAL_TAG_CAPDU_EVENT: u32 = 22;
pub const SEPROXYHAL_TAG_I2C_EVENT: u32 = 23;
pub const SEPROXYHAL_TAG_I2C_EVENT_KIND_READ: u32 = 1;
pub const SEPROXYHAL_TAG_I2C_EVENT_KIND_WRITE: u32 = 2;
pub const SEPROXYHAL_TAG_BLE_RECV_EVENT: u32 = 24;
pub const SEPROXYHAL_TAG_BOOTLOADER_RAPDU_EVENT: u32 = 25;
pub const SEPROXYHAL_TAG_UNSEC_CHUNK_READ: u32 = 50;
pub const SEPROXYHAL_TAG_UNSEC_CHUNK_READ_EXT: u32 = 51;
pub const SEPROXYHAL_TAG_BLE_SEND: u32 = 56;
pub const SEPROXYHAL_TAG_SET_SCREEN_CONFIG: u32 = 62;
pub const SEPROXYHAL_TAG_SET_LINK_PROP: u32 = 63;
pub const SEPROXYHAL_TAG_BLUENRG_SEND: u32 = 64;
pub const SEPROXYHAL_TAG_BLE_DEFINE_GENERIC_SETTING: u32 = 65;
pub const SEPROXYHAL_TAG_BLE_DEFINE_SERVICE_SETTING: u32 = 66;
pub const SEPROXYHAL_TAG_NFC_DEFINE_SERVICE_SETTING: u32 = 67;
pub const SEPROXYHAL_TAG_BLE_RADIO_POWER: u32 = 68;
pub const SEPROXYHAL_TAG_BLE_RADIO_POWER_ACTION_ON: u32 = 2;
pub const SEPROXYHAL_TAG_BLE_RADIO_POWER_ACTION_DBWIPE: u32 = 4;
pub const SEPROXYHAL_TAG_NFC_RADIO_POWER: u32 = 69;
pub const SEPROXYHAL_TAG_SE_POWER_OFF: u32 = 70;
pub const SEPROXYHAL_TAG_BLE_SECURITY_DB: u32 = 72;
pub const SEPROXYHAL_TAG_BLE_SECURITY_DB_CMD_READ: u32 = 1;
pub const SEPROXYHAL_TAG_BLE_SECURITY_DB_CMD_WRITE: u32 = 2;
pub const SEPROXYHAL_TAG_BATTERY_CHARGE: u32 = 73;
pub const SEPROXYHAL_TAG_DEVICE_OFF: u32 = 75;
pub const SEPROXYHAL_TAG_MORE_TIME: u32 = 76;
pub const SEPROXYHAL_TAG_M24SR_C_APDU: u32 = 77;
pub const SEPROXYHAL_TAG_SET_TICKER_INTERVAL: u32 = 78;
pub const SEPROXYHAL_TAG_USB_CONFIG: u32 = 79;
pub const SEPROXYHAL_TAG_USB_CONFIG_CONNECT: u32 = 1;
pub const SEPROXYHAL_TAG_USB_CONFIG_DISCONNECT: u32 = 2;
pub const SEPROXYHAL_TAG_USB_CONFIG_ADDR: u32 = 3;
pub const SEPROXYHAL_TAG_USB_CONFIG_ENDPOINTS: u32 = 4;
pub const SEPROXYHAL_TAG_USB_CONFIG_TYPE_DISABLED: u32 = 0;
pub const SEPROXYHAL_TAG_USB_CONFIG_TYPE_CONTROL: u32 = 1;
pub const SEPROXYHAL_TAG_USB_CONFIG_TYPE_INTERRUPT: u32 = 2;
pub const SEPROXYHAL_TAG_USB_CONFIG_TYPE_BULK: u32 = 3;
pub const SEPROXYHAL_TAG_USB_CONFIG_TYPE_ISOCHRONOUS: u32 = 4;
pub const SEPROXYHAL_TAG_USB_EP_PREPARE: u32 = 80;
pub const SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_SETUP: u32 = 16;
pub const SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_IN: u32 = 32;
pub const SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_OUT: u32 = 48;
pub const SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_STALL: u32 = 64;
pub const SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_UNSTALL: u32 = 128;
pub const SEPROXYHAL_TAG_SET_LED: u32 = 81;
pub const SEPROXYHAL_TAG_REQUEST_STATUS: u32 = 82;
pub const SEPROXYHAL_TAG_RAPDU: u32 = 83;
pub const SEPROXYHAL_TAG_I2C_XFER: u32 = 84;
pub const SEPROXYHAL_TAG_PRINTF: u32 = 95;
pub const SEPROXYHAL_TAG_STATUS_MASK: u32 = 96;
pub const SEPROXYHAL_TAG_GENERAL_STATUS: u32 = 96;
pub const SEPROXYHAL_TAG_GENERAL_STATUS_LAST_COMMAND: u32 = 0;
pub const SEPROXYHAL_TAG_PAIRING_STATUS: u32 = 97;
pub const SEPROXYHAL_TAG_BLE_READ_RESPONSE_STATUS: u32 = 98;
pub const SEPROXYHAL_TAG_NFC_READ_RESPONSE_STATUS: u32 = 99;
pub const SEPROXYHAL_TAG_BLE_NOTIFY_INDICATE_STATUS: u32 = 100;
pub const SEPROXYHAL_TAG_SCREEN_DISPLAY_STATUS: u32 = 101;
pub const SEPROXYHAL_TAG_PRINTF_STATUS: u32 = 102;
pub const SEPROXYHAL_TAG_SET_LINK_SPEED: u32 = 103;
pub const SEPROXYHAL_TAG_SCREEN_ANIMATION_STATUS: u32 = 104;
pub const SEPROXYHAL_TAG_SCREEN_ANIMATION_STATUS_VERTICAL_SPLIT_SLIDE: u32 = 0;
pub const SEPROXYHAL_TAG_BOOTLOADER_CAPDU_STATUS: u32 = 106;
pub const IO_CACHE: u32 = 1;
pub const NO_TIMEOUT: u32 = 0;
pub const CX_AES_BLOCK_SIZE: u32 = 16;
pub const CX_DES_BLOCK_SIZE: u32 = 8;
pub const CX_RIPEMD160_SIZE: u32 = 20;
pub const CX_SHA224_SIZE: u32 = 28;
pub const CX_SHA256_SIZE: u32 = 32;
pub const CX_SHA384_SIZE: u32 = 48;
pub const CX_SHA512_SIZE: u32 = 64;
pub const ROWS: u32 = 8;
pub const COLS1024: u32 = 16;
pub const SIZE1024: u32 = 128;
pub const CX_CRC16_INIT: u32 = 65535;
pub const NonMaskableInt_IRQn: IRQn_Type = -14;
pub const HardFault_IRQn: IRQn_Type = -13;
pub const MemoryManagement_IRQn: IRQn_Type = -12;
pub const BusFault_IRQn: IRQn_Type = -11;
pub const UsageFault_IRQn: IRQn_Type = -10;
pub const SVC_IRQn: IRQn_Type = -5;
pub const DebugMonitor_IRQn: IRQn_Type = -4;
pub const PendSV_IRQn: IRQn_Type = -2;
pub const SysTick_IRQn: IRQn_Type = -1;
pub type IRQn_Type = cty::c_schar;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_longlong;
pub type __uint64_t = cty::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_longlong;
pub type __u_quad_t = cty::c_ulonglong;
pub type __intmax_t = cty::c_longlong;
pub type __uintmax_t = cty::c_ulonglong;
pub type __dev_t = __uint64_t;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = __uint64_t;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_uint;
pub type __off_t = cty::c_long;
pub type __off64_t = __int64_t;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = __uint64_t;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = __int64_t;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = __uint64_t;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = __uint64_t;
pub type __fsword_t = cty::c_int;
pub type __ssize_t = cty::c_int;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_int;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type __time64_t = __int64_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_int;
pub type int_fast32_t = cty::c_int;
pub type int_fast64_t = cty::c_longlong;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_uint;
pub type uint_fast32_t = cty::c_uint;
pub type uint_fast64_t = cty::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union APSR_Type {
    pub b: APSR_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 27u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for APSR_Type {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IPSR_Type {
    pub b: IPSR_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for IPSR_Type {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xPSR_Type {
    pub b: xPSR_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IT(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_IT(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        T: u32,
        IT: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 15u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::core::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let IT: u32 = unsafe { ::core::mem::transmute(IT) };
            IT as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for xPSR_Type {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CONTROL_Type {
    pub b: CONTROL_Type__bindgen_ty_1,
    pub w: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FPCA(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FPCA(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        FPCA: u32,
        _reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::core::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::core::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FPCA: u32 = unsafe { ::core::mem::transmute(FPCA) };
            FPCA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for CONTROL_Type {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NVIC_Type {
    pub ISER: [u32; 1usize],
    pub RESERVED0: [u32; 31usize],
    pub ICER: [u32; 1usize],
    pub RSERVED1: [u32; 31usize],
    pub ISPR: [u32; 1usize],
    pub RESERVED2: [u32; 31usize],
    pub ICPR: [u32; 1usize],
    pub RESERVED3: [u32; 31usize],
    pub RESERVED4: [u32; 64usize],
    pub IP: [u32; 8usize],
}
impl Default for NVIC_Type {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SCB_Type {
    pub CPUID: u32,
    pub ICSR: u32,
    pub VTOR: u32,
    pub AIRCR: u32,
    pub SCR: u32,
    pub CCR: u32,
    pub RESERVED0: [u32; 1usize],
    pub SHP: [u32; 2usize],
    pub SHCSR: u32,
    pub RESERVED1: [u32; 154usize],
    pub SFCR: u32,
}
impl Default for SCB_Type {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SCnSCB_Type {
    pub RESERVED0: [u32; 2usize],
    pub ACTLR: u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct SysTick_Type {
    pub CTRL: u32,
    pub LOAD: u32,
    pub VAL: u32,
    pub CALIB: u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct MPU_Type {
    pub TYPE: u32,
    pub CTRL: u32,
    pub RNR: u32,
    pub RBAR: u32,
    pub RASR: u32,
}
extern "C" {
    pub fn os_endorsement_get_code_hash(buffer: *mut cty::c_uchar) -> cty::c_uint;
}
extern "C" {
    pub fn os_endorsement_get_public_key(
        index: cty::c_uchar,
        buffer: *mut cty::c_uchar,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_endorsement_get_public_key_certificate(
        index: cty::c_uchar,
        buffer: *mut cty::c_uchar,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_endorsement_key1_get_app_secret(buffer: *mut cty::c_uchar) -> cty::c_uint;
}
extern "C" {
    pub fn os_endorsement_key1_sign_data(
        src: *mut cty::c_uchar,
        srcLength: cty::c_uint,
        signature: *mut cty::c_uchar,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_endorsement_key2_derive_sign_data(
        src: *mut cty::c_uchar,
        srcLength: cty::c_uint,
        signature: *mut cty::c_uchar,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn halt();
}
extern "C" {
    pub fn os_parse_bertlv(
        mem: *mut cty::c_uchar,
        mem_len: cty::c_uint,
        tlv_instance_offset: *mut cty::c_uint,
        tag: cty::c_uint,
        offset: cty::c_uint,
        buffer: *mut *mut cty::c_void,
        maxlength: cty::c_uint,
    ) -> cty::c_uint;
}
pub type bolos_bool_t = cty::c_char;
pub type bolos_task_status_t = cty::c_uchar;
pub const TASK_BOLOS: task_unsecure_id_e = 0;
pub const TASK_SYSCALL: task_unsecure_id_e = 1;
pub const TASK_USERTASKS_START: task_unsecure_id_e = 2;
pub const TASK_USER: task_unsecure_id_e = 2;
pub const TASK_SUBTASKS_START: task_unsecure_id_e = 3;
pub const TASK_SUBTASK_0: task_unsecure_id_e = 3;
pub const TASK_BOLOS_UX: task_unsecure_id_e = 4;
pub const TASK_MAXCOUNT: task_unsecure_id_e = 5;
pub type task_unsecure_id_e = cty::c_uchar;
extern "C" {
    pub fn os_sched_exec(app_idx: cty::c_uint);
}
extern "C" {
    pub fn os_sched_exit(exit_code: bolos_task_status_t);
}
extern "C" {
    pub fn os_sched_is_running(task_idx: cty::c_uint) -> bolos_bool_t;
}
extern "C" {
    pub fn os_sched_last_status(task_idx: cty::c_uint) -> bolos_task_status_t;
}
extern "C" {
    pub fn os_sched_yield(status: bolos_task_status_t);
}
extern "C" {
    pub fn os_sched_switch(task_idx: cty::c_uint, status: bolos_task_status_t);
}
extern "C" {
    pub fn os_sched_current_task() -> cty::c_uint;
}
extern "C" {
    pub fn os_sched_create(
        main: *mut cty::c_void,
        nvram: *mut cty::c_void,
        nvram_length: cty::c_uint,
        ram0: *mut cty::c_void,
        ram0_length: cty::c_uint,
        stack: *mut cty::c_void,
        stack_length: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_sched_kill(taskidx: cty::c_uint);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct bolos_ux_asynch_callback_t {
    pub asynchmodal_end_callback:
        ::core::option::Option<unsafe extern "C" fn(ux_status: cty::c_uint)>,
}
extern "C" {
    pub static mut G_io_asynch_ux_callback: bolos_ux_asynch_callback_t;
}
extern "C" {
    pub fn os_flags() -> cty::c_uint;
}
extern "C" {
    pub fn os_version(version: *mut cty::c_uchar, maxlength: cty::c_uint) -> cty::c_uint;
}
extern "C" {
    pub fn os_serial(serial: *mut cty::c_uchar, maxlength: cty::c_uint) -> cty::c_uint;
}
extern "C" {
    pub fn os_seph_features() -> cty::c_uint;
}
extern "C" {
    pub fn os_seph_version(version: *mut cty::c_uchar, maxlength: cty::c_uint) -> cty::c_uint;
}
extern "C" {
    pub fn os_bootloader_version(version: *mut cty::c_uchar, maxlength: cty::c_uint)
        -> cty::c_uint;
}
extern "C" {
    pub fn os_get_sn(buffer: *mut cty::c_uchar) -> cty::c_uint;
}
extern "C" {
    pub fn get_api_level() -> cty::c_uint;
}
extern "C" {
    pub static mut G_io_apdu_buffer: [cty::c_uchar; 260usize];
}
extern "C" {
    pub fn io_exchange(channel_and_flags: cty::c_uchar, tx_len: cty::c_ushort) -> cty::c_ushort;
}
pub const IO_APDU_MEDIA_NONE: io_apdu_media_t = 0;
pub const IO_APDU_MEDIA_USB_HID: io_apdu_media_t = 1;
pub const IO_APDU_MEDIA_BLE: io_apdu_media_t = 2;
pub const IO_APDU_MEDIA_NFC: io_apdu_media_t = 3;
pub const IO_APDU_MEDIA_USB_CCID: io_apdu_media_t = 4;
pub const IO_APDU_MEDIA_USB_WEBUSB: io_apdu_media_t = 5;
pub const IO_APDU_MEDIA_RAW: io_apdu_media_t = 6;
pub const IO_APDU_MEDIA_U2F: io_apdu_media_t = 7;
pub type io_apdu_media_t = cty::c_uchar;
extern "C" {
    pub static mut G_io_usb_ep_buffer: [cty::c_uchar; 50usize];
}
extern "C" {
    pub fn io_event(channel: cty::c_uchar) -> cty::c_uchar;
}
extern "C" {
    pub fn os_lib_call(call_parameters: *mut cty::c_uint);
}
extern "C" {
    pub fn os_lib_end();
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct meminfo_s {
    pub free_nvram_size: cty::c_uint,
    pub appMemory: cty::c_uint,
    pub systemSize: cty::c_uint,
    pub slots: cty::c_uint,
}
pub type meminfo_t = meminfo_s;
extern "C" {
    pub fn os_get_memory_info(meminfo: *mut meminfo_t);
}
extern "C" {
    pub fn nvm_write(dst_adr: *mut cty::c_void, src_adr: *mut cty::c_void, src_len: cty::c_uint);
}
extern "C" {
    pub fn nvm_erase(dst_adr: *mut cty::c_void, len: cty::c_uint);
}
extern "C" {
    pub fn nvm_write_page(page_adr: cty::c_uint);
}
extern "C" {
    pub fn nvm_erase_page(page_adr: cty::c_uint);
}
extern "C" {
    pub fn os_perso_erase_all();
}
extern "C" {
    pub fn pic(linked_address: *mut cty::c_void) -> *mut cty::c_void;
}
extern "C" {
    pub fn pic_internal(link_address: *mut cty::c_void) -> *mut cty::c_void;
}
extern "C" {
    pub fn os_perso_set_pin(identity: cty::c_uint, pin: *mut cty::c_uchar, length: cty::c_uint);
}
extern "C" {
    pub fn os_perso_set_current_identity_pin(pin: *mut cty::c_uchar, length: cty::c_uint);
}
extern "C" {
    pub fn os_global_pin_is_validated() -> bolos_bool_t;
}
extern "C" {
    pub fn os_global_pin_check(
        pin_buffer: *mut cty::c_uchar,
        pin_length: cty::c_uchar,
    ) -> bolos_bool_t;
}
extern "C" {
    pub fn os_global_pin_invalidate();
}
extern "C" {
    pub fn os_global_pin_retries() -> cty::c_uint;
}
pub type size_t = cty::c_uint;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: cty::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: cty::c_int,
    pub __wchb: [cty::c_char; 4usize],
    _bindgen_union_align: u32,
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = cty::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: cty::c_int,
    pub _IO_read_ptr: *mut cty::c_char,
    pub _IO_read_end: *mut cty::c_char,
    pub _IO_read_base: *mut cty::c_char,
    pub _IO_write_base: *mut cty::c_char,
    pub _IO_write_ptr: *mut cty::c_char,
    pub _IO_write_end: *mut cty::c_char,
    pub _IO_buf_base: *mut cty::c_char,
    pub _IO_buf_end: *mut cty::c_char,
    pub _IO_save_base: *mut cty::c_char,
    pub _IO_backup_base: *mut cty::c_char,
    pub _IO_save_end: *mut cty::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: cty::c_int,
    pub _flags2: cty::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: cty::c_ushort,
    pub _vtable_offset: cty::c_schar,
    pub _shortbuf: [cty::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut cty::c_void,
    pub __pad5: size_t,
    pub _mode: cty::c_int,
    pub _unused2: [cty::c_char; 40usize],
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rename(__old: *const cty::c_char, __new: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: cty::c_int,
        __old: *const cty::c_char,
        __newfd: cty::c_int,
        __new: *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const cty::c_char, __pfx: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const cty::c_char,
        __modes: *const cty::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: cty::c_int, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut cty::c_void, __len: size_t, __modes: *const cty::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut cty::c_char, __sizeloc: *mut size_t) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut cty::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut cty::c_char,
        __modes: cty::c_int,
        __n: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut cty::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn printf(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const cty::c_char, __arg: __builtin_va_list) -> cty::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut cty::c_char,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut cty::c_char,
        __maxlen: cty::c_uint,
        __format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut cty::c_char,
        __maxlen: cty::c_uint,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: cty::c_int,
        __fmt: *const cty::c_char,
        __arg: __gnuc_va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn dprintf(__fd: cty::c_int, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn scanf(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(__s: *const cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const cty::c_char, __arg: __builtin_va_list) -> cty::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const cty::c_char,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const cty::c_char, __arg: __builtin_va_list) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const cty::c_char,
        __format: *const cty::c_char,
        __arg: __builtin_va_list,
    ) -> cty::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar() -> cty::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> cty::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fputc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putw(__w: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut cty::c_char, __n: cty::c_int, __stream: *mut FILE) -> *mut cty::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __delimiter: cty::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __delimiter: cty::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const cty::c_char, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn puts(__s: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn ungetc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut cty::c_void,
        __size: cty::c_uint,
        __n: cty::c_uint,
        __stream: *mut FILE,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const cty::c_void,
        __size: cty::c_uint,
        __n: cty::c_uint,
        __s: *mut FILE,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: cty::c_long, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> cty::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn perror(__s: *const cty::c_char);
}
extern "C" {
    pub static mut sys_nerr: cty::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const cty::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn popen(__command: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: cty::c_int) -> cty::c_int;
}
pub type cx_err_t = u32;
pub type wchar_t = cty::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: cty::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
extern "C" {
    pub fn cx_get_random_bytes(buffer: *mut cty::c_void, len: size_t) -> cx_err_t;
}
pub type appmain_t = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct application_s {
    pub nvram_begin: *mut cty::c_uchar,
    pub nvram_end: *mut cty::c_uchar,
    pub main: appmain_t,
    pub flags: cty::c_uint,
    pub code_length: cty::c_uint,
    pub data_length: cty::c_uint,
    pub params_length: cty::c_uint,
    pub sha256_code_data: [cty::c_uchar; 32usize],
    pub sha256_full: [cty::c_uchar; 32usize],
}
impl Default for application_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type application_t = application_s;
extern "C" {
    pub fn os_registry_get_tag(
        app_idx: cty::c_uint,
        tlvoffset: *mut cty::c_uint,
        tag: cty::c_uint,
        value_offset: cty::c_uint,
        buffer: *mut cty::c_void,
        maxlength: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_registry_get_current_app_tag(
        tag: cty::c_uint,
        buffer: *mut cty::c_uchar,
        maxlen: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_registry_delete_app_and_dependees(app_idx: cty::c_uint);
}
extern "C" {
    pub fn os_registry_delete_all_apps();
}
extern "C" {
    pub fn os_registry_count() -> cty::c_uint;
}
extern "C" {
    pub fn os_registry_get(app_idx: cty::c_uint, out_application_entry: *mut application_t);
}
pub const ERR_GEN_ID_01: generic_identifiers = 1;
pub const ERR_GEN_ID_02: generic_identifiers = 2;
pub const ERR_GEN_ID_03: generic_identifiers = 3;
pub const ERR_GEN_ID_04: generic_identifiers = 4;
pub const ERR_GEN_ID_05: generic_identifiers = 5;
pub const ERR_GEN_ID_06: generic_identifiers = 6;
pub const ERR_GEN_ID_07: generic_identifiers = 7;
pub const ERR_GEN_ID_08: generic_identifiers = 8;
pub const ERR_GEN_ID_09: generic_identifiers = 9;
pub const ERR_GEN_ID_0A: generic_identifiers = 10;
pub const ERR_GEN_ID_0B: generic_identifiers = 11;
pub const ERR_GEN_ID_0C: generic_identifiers = 12;
pub const ERR_GEN_ID_0D: generic_identifiers = 13;
pub const ERR_GEN_ID_0E: generic_identifiers = 14;
pub const ERR_GEN_ID_0F: generic_identifiers = 15;
pub const ERR_GEN_ID_10: generic_identifiers = 16;
pub const ERR_GEN_ID_11: generic_identifiers = 17;
pub const ERR_GEN_ID_12: generic_identifiers = 18;
pub const ERR_GEN_ID_13: generic_identifiers = 19;
pub const ERR_GEN_ID_14: generic_identifiers = 20;
pub const ERR_GEN_ID_15: generic_identifiers = 21;
pub const ERR_GEN_ID_16: generic_identifiers = 22;
pub const ERR_GEN_ID_17: generic_identifiers = 23;
pub const ERR_GEN_ID_18: generic_identifiers = 24;
pub const ERR_GEN_ID_19: generic_identifiers = 25;
pub const ERR_GEN_ID_1A: generic_identifiers = 26;
pub const ERR_GEN_ID_1B: generic_identifiers = 27;
pub const ERR_GEN_ID_1C: generic_identifiers = 28;
pub const ERR_GEN_ID_1D: generic_identifiers = 29;
pub const ERR_GEN_ID_1E: generic_identifiers = 30;
pub const ERR_GEN_ID_1F: generic_identifiers = 31;
pub const ERR_GEN_ID_20: generic_identifiers = 32;
pub const ERR_GEN_ID_21: generic_identifiers = 33;
pub const ERR_GEN_ID_22: generic_identifiers = 34;
pub const ERR_GEN_ID_23: generic_identifiers = 35;
pub const ERR_GEN_ID_24: generic_identifiers = 36;
pub const ERR_GEN_ID_25: generic_identifiers = 37;
pub const ERR_GEN_ID_26: generic_identifiers = 38;
pub const ERR_GEN_ID_27: generic_identifiers = 39;
pub const ERR_GEN_ID_28: generic_identifiers = 40;
pub const ERR_GEN_ID_29: generic_identifiers = 41;
pub const ERR_GEN_ID_2A: generic_identifiers = 42;
pub const ERR_GEN_ID_2B: generic_identifiers = 43;
pub type generic_identifiers = cty::c_uchar;
pub type exception_t = cty::c_ushort;
pub type try_context_t = try_context_s;
pub type jmp_buf = [cty::c_uint; 10usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct try_context_s {
    pub jmp_buf: jmp_buf,
    pub previous: *mut try_context_t,
    pub ex: exception_t,
}
impl Default for try_context_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    pub fn longjmp(__jmpb: *mut cty::c_uint, __retval: cty::c_int);
}
extern "C" {
    pub fn setjmp(__jmpb: *mut cty::c_uint) -> cty::c_int;
}
extern "C" {
    pub fn try_context_get() -> *mut try_context_t;
}
extern "C" {
    pub fn try_context_set(context: *mut try_context_t) -> *mut try_context_t;
}
extern "C" {
    pub fn os_longjmp(exception: cty::c_uint);
}
pub type uint64bits_t = u64;
pub const CX_NONE: cx_md_e = 0;
pub const CX_RIPEMD160: cx_md_e = 1;
pub const CX_SHA224: cx_md_e = 2;
pub const CX_SHA256: cx_md_e = 3;
pub const CX_SHA384: cx_md_e = 4;
pub const CX_SHA512: cx_md_e = 5;
pub const CX_KECCAK: cx_md_e = 6;
pub const CX_SHA3: cx_md_e = 7;
pub const CX_GROESTL: cx_md_e = 8;
pub const CX_BLAKE2B: cx_md_e = 9;
pub const CX_SHAKE128: cx_md_e = 10;
pub const CX_SHAKE256: cx_md_e = 11;
pub const CX_SHA3_256: cx_md_e = 12;
pub const CX_SHA3_512: cx_md_e = 13;
pub type cx_md_e = cty::c_uchar;
pub use self::cx_md_e as cx_md_t;
pub type cx_hash_t = cx_hash_header_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_hash_info_t {
    pub md_type: cx_md_t,
    pub output_size: size_t,
    pub block_size: size_t,
    pub init_func: ::core::option::Option<unsafe extern "C" fn(ctx: *mut cx_hash_t) -> cx_err_t>,
    pub update_func: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut cx_hash_t, data: *const u8, len: size_t) -> cx_err_t,
    >,
    pub finish_func: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut cx_hash_t, digest: *mut u8) -> cx_err_t,
    >,
    pub init_ex_func: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut cx_hash_t, output_size: size_t) -> cx_err_t,
    >,
    pub output_size_func:
        ::core::option::Option<unsafe extern "C" fn(ctx: *const cx_hash_t) -> size_t>,
}
impl Default for cx_hash_info_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_hash_header_s {
    pub info: *const cx_hash_info_t,
    pub counter: u32,
}
impl Default for cx_hash_header_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    pub fn cx_hash_get_size(ctx: *const cx_hash_t) -> size_t;
}
extern "C" {
    pub fn cx_hash_no_throw(
        hash: *mut cx_hash_t,
        mode: u32,
        in_: *const u8,
        len: size_t,
        out: *mut u8,
        out_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hash_init(hash: *mut cx_hash_t, hash_id: cx_md_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_hash_init_ex(hash: *mut cx_hash_t, hash_id: cx_md_t, output_size: size_t)
        -> cx_err_t;
}
extern "C" {
    pub fn cx_hash_update(hash: *mut cx_hash_t, in_: *const u8, in_len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_hash_final(hash: *mut cx_hash_t, digest: *mut u8) -> cx_err_t;
}
pub type cx_bn_t = u32;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cx_bn_mont_ctx_t {
    pub n: cx_bn_t,
    pub h: cx_bn_t,
}
extern "C" {
    pub fn cx_bn_lock(word_nbytes: size_t, flags: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_unlock() -> u32;
}
extern "C" {
    pub fn cx_bn_is_locked() -> bool;
}
extern "C" {
    pub fn cx_bn_locked() -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_alloc(x: *mut cx_bn_t, nbytes: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_alloc_init(
        x: *mut cx_bn_t,
        nbytes: size_t,
        value: *const u8,
        value_nbytes: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_destroy(x: *mut cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_nbytes(x: cx_bn_t, nbytes: *mut size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_init(x: cx_bn_t, value: *const u8, value_nbytes: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_rand(x: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_copy(a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_set_u32(x: cx_bn_t, n: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_get_u32(x: cx_bn_t, n: *mut u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_export(x: cx_bn_t, bytes: *mut u8, nbytes: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_cmp(a: cx_bn_t, b: cx_bn_t, diff: *mut cty::c_int) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_cmp_u32(a: cx_bn_t, b: u32, diff: *mut cty::c_int) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_is_odd(n: cx_bn_t, odd: *mut bool) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_xor(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_or(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_and(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_tst_bit(x: cx_bn_t, pos: u32, set: *mut bool) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_set_bit(x: cx_bn_t, pos: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_clr_bit(x: cx_bn_t, pos: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_shr(x: cx_bn_t, n: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_shl(x: cx_bn_t, n: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_cnt_bits(n: cx_bn_t, nbits: *mut u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_add(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_sub(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mul(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_add(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_sub(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_mul(r: cx_bn_t, a: cx_bn_t, b: cx_bn_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_reduce(r: cx_bn_t, d: cx_bn_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_sqrt(bn_r: cx_bn_t, bn_a: cx_bn_t, bn_n: cx_bn_t, sign: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_pow_bn(r: cx_bn_t, a: cx_bn_t, e: cx_bn_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_pow(r: cx_bn_t, a: cx_bn_t, e: *const u8, e_len: u32, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_pow2(r: cx_bn_t, a: cx_bn_t, e: *const u8, e_len: u32, n: cx_bn_t)
        -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_invert_nprime(r: cx_bn_t, a: cx_bn_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_mod_u32_invert(r: cx_bn_t, a: u32, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_alloc(ctx: *mut cx_bn_mont_ctx_t, length: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_init(ctx: *mut cx_bn_mont_ctx_t, n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_init2(ctx: *mut cx_bn_mont_ctx_t, n: cx_bn_t, h: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_to_montgomery(x: cx_bn_t, z: cx_bn_t, ctx: *const cx_bn_mont_ctx_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_from_montgomery(
        z: cx_bn_t,
        x: cx_bn_t,
        ctx: *const cx_bn_mont_ctx_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_mul(
        r: cx_bn_t,
        a: cx_bn_t,
        b: cx_bn_t,
        ctx: *const cx_bn_mont_ctx_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_pow(
        r: cx_bn_t,
        a: cx_bn_t,
        e: *const u8,
        e_len: u32,
        ctx: *const cx_bn_mont_ctx_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_pow_bn(
        r: cx_bn_t,
        a: cx_bn_t,
        e: cx_bn_t,
        ctx: *const cx_bn_mont_ctx_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_mont_invert_nprime(r: cx_bn_t, a: cx_bn_t, ctx: *const cx_bn_mont_ctx_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_is_prime(n: cx_bn_t, prime: *mut bool) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_next_prime(n: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_bn_rng(bn_r: cx_bn_t, bn_n: cx_bn_t) -> cx_err_t;
}
pub const CX_CURVE_NONE: cx_curve_e = 0;
pub const CX_CURVE_WEIERSTRASS_START: cx_curve_e = 32;
pub const CX_CURVE_SECP256K1: cx_curve_e = 33;
pub const CX_CURVE_SECP256R1: cx_curve_e = 34;
pub const CX_CURVE_SECP384R1: cx_curve_e = 35;
pub const CX_CURVE_SECP521R1: cx_curve_e = 36;
pub const CX_CURVE_BrainPoolP256T1: cx_curve_e = 49;
pub const CX_CURVE_BrainPoolP256R1: cx_curve_e = 50;
pub const CX_CURVE_BrainPoolP320T1: cx_curve_e = 51;
pub const CX_CURVE_BrainPoolP320R1: cx_curve_e = 52;
pub const CX_CURVE_BrainPoolP384T1: cx_curve_e = 53;
pub const CX_CURVE_BrainPoolP384R1: cx_curve_e = 54;
pub const CX_CURVE_BrainPoolP512T1: cx_curve_e = 55;
pub const CX_CURVE_BrainPoolP512R1: cx_curve_e = 56;
pub const CX_CURVE_BLS12_381_G1: cx_curve_e = 57;
pub const CX_CURVE_FRP256V1: cx_curve_e = 65;
pub const CX_CURVE_Stark256: cx_curve_e = 81;
pub const CX_CURVE_WEIERSTRASS_END: cx_curve_e = 111;
pub const CX_CURVE_TWISTED_EDWARDS_START: cx_curve_e = 112;
pub const CX_CURVE_Ed25519: cx_curve_e = 113;
pub const CX_CURVE_Ed448: cx_curve_e = 114;
pub const CX_CURVE_TWISTED_EDWARDS_END: cx_curve_e = 127;
pub const CX_CURVE_MONTGOMERY_START: cx_curve_e = 128;
pub const CX_CURVE_Curve25519: cx_curve_e = 129;
pub const CX_CURVE_Curve448: cx_curve_e = 130;
pub const CX_CURVE_MONTGOMERY_END: cx_curve_e = 143;
pub type cx_curve_e = cty::c_uchar;
pub use self::cx_curve_e as cx_curve_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_curve_weierstrass_s {
    pub curve: cx_curve_t,
    pub bit_size: cty::c_uint,
    pub length: cty::c_uint,
    pub a: *const u8,
    pub b: *const u8,
    pub p: *const u8,
    pub Gx: *const u8,
    pub Gy: *const u8,
    pub n: *const u8,
    pub h: *const u8,
    pub Hn: *const u8,
    pub Hp: *const u8,
}
impl Default for cx_curve_weierstrass_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_curve_weierstrass_t = cx_curve_weierstrass_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_curve_twisted_edwards_s {
    pub curve: cx_curve_t,
    pub bit_size: cty::c_uint,
    pub length: cty::c_uint,
    pub a: *const u8,
    pub b: *const u8,
    pub p: *const u8,
    pub Gx: *const u8,
    pub Gy: *const u8,
    pub n: *const u8,
    pub h: *const u8,
    pub Hn: *const u8,
    pub Hp: *const u8,
}
impl Default for cx_curve_twisted_edwards_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_curve_twisted_edwards_t = cx_curve_twisted_edwards_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_curve_montgomery_s {
    pub curve: cx_curve_t,
    pub bit_size: cty::c_uint,
    pub length: cty::c_uint,
    pub a: *const u8,
    pub b: *const u8,
    pub p: *const u8,
    pub Gx: *const u8,
    pub Gy: *const u8,
    pub n: *const u8,
    pub h: *const u8,
    pub Hn: *const u8,
    pub Hp: *const u8,
}
impl Default for cx_curve_montgomery_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_curve_montgomery_t = cx_curve_montgomery_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_curve_domain_s {
    pub curve: cx_curve_t,
    pub bit_size: cty::c_uint,
    pub length: cty::c_uint,
    pub a: *const u8,
    pub b: *const u8,
    pub p: *const u8,
    pub Gx: *const u8,
    pub Gy: *const u8,
    pub n: *const u8,
    pub h: *const u8,
    pub Hn: *const u8,
    pub Hp: *const u8,
}
impl Default for cx_curve_domain_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_curve_domain_t = cx_curve_domain_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ec_point_s {
    pub curve: cx_curve_t,
    pub x: cx_bn_t,
    pub y: cx_bn_t,
    pub z: cx_bn_t,
}
impl Default for cx_ec_point_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_ecpoint_t = cx_ec_point_s;
pub const CX_CURVE_PARAM_NONE: cx_curve_dom_param_s = 0;
pub const CX_CURVE_PARAM_A: cx_curve_dom_param_s = 1;
pub const CX_CURVE_PARAM_B: cx_curve_dom_param_s = 2;
pub const CX_CURVE_PARAM_Field: cx_curve_dom_param_s = 3;
pub const CX_CURVE_PARAM_Gx: cx_curve_dom_param_s = 4;
pub const CX_CURVE_PARAM_Gy: cx_curve_dom_param_s = 5;
pub const CX_CURVE_PARAM_Order: cx_curve_dom_param_s = 6;
pub const CX_CURVE_PARAM_Cofactor: cx_curve_dom_param_s = 7;
pub type cx_curve_dom_param_s = cty::c_uchar;
pub use self::cx_curve_dom_param_s as cx_curve_dom_param_t;
extern "C" {
    pub fn cx_ecdomain_size(curve: cx_curve_t, length: *mut size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdomain_parameters_length(cv: cx_curve_t, length: *mut size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdomain_parameter(
        cv: cx_curve_t,
        id: cx_curve_dom_param_t,
        p: *mut u8,
        p_len: u32,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdomain_parameter_bn(
        cv: cx_curve_t,
        id: cx_curve_dom_param_t,
        p: cx_bn_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdomain_generator(cv: cx_curve_t, Gx: *mut u8, Gy: *mut u8, len: size_t)
        -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdomain_generator_bn(cv: cx_curve_t, P: *mut cx_ecpoint_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_alloc(P: *mut cx_ecpoint_t, cv: cx_curve_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_destroy(P: *mut cx_ecpoint_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_init(
        P: *mut cx_ecpoint_t,
        x: *const u8,
        x_len: size_t,
        y: *const u8,
        y_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_init_bn(P: *mut cx_ecpoint_t, x: cx_bn_t, y: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_export(
        P: *const cx_ecpoint_t,
        x: *mut u8,
        x_len: size_t,
        y: *mut u8,
        y_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_export_bn(
        P: *const cx_ecpoint_t,
        x: *mut cx_bn_t,
        y: *mut cx_bn_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_compress(
        P: *const cx_ecpoint_t,
        xy_compressed: *mut u8,
        xy_compressed_len: size_t,
        sign: *mut u32,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_decompress(
        P: *mut cx_ecpoint_t,
        xy_compressed: *const u8,
        xy_compressed_len: size_t,
        sign: u32,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_add(
        R: *mut cx_ecpoint_t,
        P: *const cx_ecpoint_t,
        Q: *const cx_ecpoint_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_neg(P: *mut cx_ecpoint_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_rnd_scalarmul(P: *mut cx_ecpoint_t, k: *const u8, k_len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_rnd_scalarmul_bn(P: *mut cx_ecpoint_t, bn_k: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_rnd_fixed_scalarmul(
        P: *mut cx_ecpoint_t,
        k: *const u8,
        k_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_scalarmul(P: *mut cx_ecpoint_t, k: *const u8, k_len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_scalarmul_bn(P: *mut cx_ecpoint_t, bn_k: cx_bn_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_double_scalarmul(
        R: *mut cx_ecpoint_t,
        P: *mut cx_ecpoint_t,
        Q: *mut cx_ecpoint_t,
        k: *const u8,
        k_len: size_t,
        r: *const u8,
        r_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_double_scalarmul_bn(
        R: *mut cx_ecpoint_t,
        P: *mut cx_ecpoint_t,
        Q: *mut cx_ecpoint_t,
        bn_k: cx_bn_t,
        bn_r: cx_bn_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_cmp(
        P: *const cx_ecpoint_t,
        Q: *const cx_ecpoint_t,
        is_equal: *mut bool,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_is_on_curve(R: *const cx_ecpoint_t, is_on_curve: *mut bool) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecpoint_is_at_infinity(R: *const cx_ecpoint_t, is_infinite: *mut bool) -> cx_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_public_key_s {
    pub curve: cx_curve_t,
    pub W_len: size_t,
    pub W: [u8; 1usize],
}
impl Default for cx_ecfp_public_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 1usize],
}
impl Default for cx_ecfp_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_256_public_key_s {
    pub curve: cx_curve_t,
    pub W_len: size_t,
    pub W: [u8; 65usize],
}
impl Default for cx_ecfp_256_public_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_256_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 32usize],
}
impl Default for cx_ecfp_256_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_256_extended_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 64usize],
}
impl Default for cx_ecfp_256_extended_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_ecfp_256_public_key_t = cx_ecfp_256_public_key_s;
pub type cx_ecfp_256_private_key_t = cx_ecfp_256_private_key_s;
pub type cx_ecfp_256_extended_private_key_t = cx_ecfp_256_extended_private_key_s;
pub type cx_ecfp_public_key_t = cx_ecfp_256_public_key_s;
pub type cx_ecfp_private_key_t = cx_ecfp_256_private_key_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_384_public_key_s {
    pub curve: cx_curve_t,
    pub W_len: size_t,
    pub W: [u8; 97usize],
}
impl Default for cx_ecfp_384_public_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_384_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 48usize],
}
impl Default for cx_ecfp_384_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_ecfp_384_private_key_t = cx_ecfp_384_private_key_s;
pub type cx_ecfp_384_public_key_t = cx_ecfp_384_public_key_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_512_public_key_s {
    pub curve: cx_curve_t,
    pub W_len: size_t,
    pub W: [u8; 129usize],
}
impl Default for cx_ecfp_512_public_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_512_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 64usize],
}
impl Default for cx_ecfp_512_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_512_extented_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 128usize],
}
impl Default for cx_ecfp_512_extented_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_ecfp_512_public_key_t = cx_ecfp_512_public_key_s;
pub type cx_ecfp_512_private_key_t = cx_ecfp_512_private_key_s;
pub type cx_ecfp_512_extented_private_key_t = cx_ecfp_512_extented_private_key_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_640_public_key_s {
    pub curve: cx_curve_t,
    pub W_len: size_t,
    pub W: [u8; 161usize],
}
impl Default for cx_ecfp_640_public_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ecfp_640_private_key_s {
    pub curve: cx_curve_t,
    pub d_len: size_t,
    pub d: [u8; 80usize],
}
impl Default for cx_ecfp_640_private_key_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_ecfp_640_public_key_t = cx_ecfp_640_public_key_s;
pub type cx_ecfp_640_private_key_t = cx_ecfp_640_private_key_s;
extern "C" {
    pub fn cx_ecfp_add_point_no_throw(
        curve: cx_curve_t,
        R: *mut u8,
        P: *const u8,
        Q: *const u8,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecfp_scalar_mult_no_throw(
        curve: cx_curve_t,
        P: *mut u8,
        k: *const u8,
        k_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecfp_init_public_key_no_throw(
        curve: cx_curve_t,
        rawkey: *const u8,
        key_len: size_t,
        key: *mut cx_ecfp_public_key_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecfp_init_private_key_no_throw(
        curve: cx_curve_t,
        rawkey: *const u8,
        key_len: size_t,
        pvkey: *mut cx_ecfp_private_key_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecfp_generate_pair_no_throw(
        curve: cx_curve_t,
        pubkey: *mut cx_ecfp_public_key_t,
        privkey: *mut cx_ecfp_private_key_t,
        keepprivate: bool,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecfp_generate_pair2_no_throw(
        curve: cx_curve_t,
        pubkey: *mut cx_ecfp_public_key_t,
        privkey: *mut cx_ecfp_private_key_t,
        keepprivate: bool,
        hashID: cx_md_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_eddsa_get_public_key_no_throw(
        pvkey: *const cx_ecfp_private_key_t,
        hashID: cx_md_t,
        pukey: *mut cx_ecfp_public_key_t,
        a: *mut u8,
        a_len: size_t,
        h: *mut u8,
        h_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_edwards_compress_point_no_throw(
        curve: cx_curve_t,
        p: *mut u8,
        p_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_edwards_decompress_point_no_throw(
        curve: cx_curve_t,
        p: *mut u8,
        p_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn os_perso_set_seed(
        identity: cty::c_uint,
        algorithm: cty::c_uint,
        seed: *mut cty::c_uchar,
        length: cty::c_uint,
    );
}
extern "C" {
    pub fn os_perso_derive_and_set_seed(
        identity: cty::c_uchar,
        prefix: *const cty::c_char,
        prefix_length: cty::c_uint,
        passphrase: *const cty::c_char,
        passphrase_length: cty::c_uint,
        words: *const cty::c_char,
        words_length: cty::c_uint,
    );
}
extern "C" {
    pub fn os_perso_set_words(words: *const cty::c_uchar, length: cty::c_uint);
}
extern "C" {
    pub fn os_perso_finalize();
}
extern "C" {
    pub fn os_perso_isonboarded() -> bolos_bool_t;
}
extern "C" {
    pub fn os_perso_derive_node_bip32(
        curve: cx_curve_t,
        path: *const cty::c_uint,
        pathLength: cty::c_uint,
        privateKey: *mut cty::c_uchar,
        chain: *mut cty::c_uchar,
    );
}
extern "C" {
    pub fn os_perso_derive_node_with_seed_key(
        mode: cty::c_uint,
        curve: cx_curve_t,
        path: *const cty::c_uint,
        pathLength: cty::c_uint,
        privateKey: *mut cty::c_uchar,
        chain: *mut cty::c_uchar,
        seed_key: *mut cty::c_uchar,
        seed_key_length: cty::c_uint,
    );
}
extern "C" {
    pub fn os_perso_derive_eip2333(
        curve: cx_curve_t,
        path: *const cty::c_uint,
        pathLength: cty::c_uint,
        privateKey: *mut cty::c_uchar,
    );
}
extern "C" {
    pub fn os_perso_seed_cookie(
        seed_cookie: *mut cty::c_uchar,
        seed_cookie_length: cty::c_uint,
    ) -> cty::c_uint;
}
pub const OS_SETTING_BRIGHTNESS: os_setting_e = 0;
pub const OS_SETTING_INVERT: os_setting_e = 1;
pub const OS_SETTING_ROTATION: os_setting_e = 2;
pub const OS_SETTING_AUTO_LOCK_DELAY: os_setting_e = 3;
pub const OS_SETTING_SCREEN_LOCK_DELAY: os_setting_e = 4;
pub const OS_SETTING_POWER_OFF_DELAY: os_setting_e = 5;
pub const OS_SETTING_PLANEMODE: os_setting_e = 6;
pub const OS_SETTING_PRIVACY_MODE: os_setting_e = 7;
pub const OS_SETTING_LAST_INT: os_setting_e = 8;
pub const OS_SETTING_SAVER_STRING: os_setting_e = 8;
pub const OS_SETTING_DEVICENAME: os_setting_e = 9;
pub const OS_SETTING_BLEMACADR: os_setting_e = 10;
pub const OS_SETTING_LAST: os_setting_e = 11;
pub type os_setting_e = cty::c_uchar;
pub use self::os_setting_e as os_setting_t;
extern "C" {
    pub fn os_setting_get(
        setting_id: cty::c_uint,
        value: *mut cty::c_uchar,
        maxlen: cty::c_uint,
    ) -> cty::c_uint;
}
extern "C" {
    pub fn os_setting_set(setting_id: cty::c_uint, value: *mut cty::c_uchar, length: cty::c_uint);
}
extern "C" {
    pub fn u4be_encode(buffer: *mut cty::c_uchar, offset: cty::c_uint, value: cty::c_uint);
}
extern "C" {
    pub fn u4le_encode(buffer: *mut cty::c_uchar, offset: cty::c_uint, value: cty::c_uint);
}
extern "C" {
    pub fn os_memset4(dst: *mut cty::c_void, initval: cty::c_uint, nbintval: cty::c_uint);
}
extern "C" {
    pub fn os_xor(
        dst: *mut cty::c_void,
        src1: *mut cty::c_void,
        src2: *mut cty::c_void,
        length: cty::c_uint,
    );
}
extern "C" {
    pub fn os_secure_memcmp(
        src1: *mut cty::c_void,
        src2: *mut cty::c_void,
        length: cty::c_uint,
    ) -> cty::c_char;
}
extern "C" {
    pub fn os_memmove(
        dest: *mut cty::c_void,
        src: *const cty::c_void,
        n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn os_memcpy(
        dest: *mut cty::c_void,
        src: *const cty::c_void,
        n: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn os_memcmp(s1: *const cty::c_void, s2: *const cty::c_void, n: size_t) -> cty::c_int;
}
extern "C" {
    pub fn os_memset(s: *mut cty::c_void, c: cty::c_int, n: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn app_main();
}
extern "C" {
    pub fn os_boot();
}
extern "C" {
    pub fn io_timeout(last_timeout: cty::c_ushort) -> cty::c_ushort;
}
extern "C" {
    pub fn screen_printf(format: *const cty::c_char, ...);
}
extern "C" {
    pub fn screen_printc(c: cty::c_uchar);
}
pub const BOLOS_UX_INITIALIZE: bolos_ux_e = 0;
pub const BOLOS_UX_EVENT: bolos_ux_e = 1;
pub const BOLOS_UX_KEYBOARD: bolos_ux_e = 2;
pub const BOLOS_UX_WAKE_UP: bolos_ux_e = 3;
pub const BOLOS_UX_VALIDATE_PIN: bolos_ux_e = 14;
pub const BOLOS_UX_LAST_ID: bolos_ux_e = 15;
pub type bolos_ux_e = cty::c_uchar;
pub use self::bolos_ux_e as bolos_ux_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bolos_ux_params_s {
    pub ux_id: bolos_ux_t,
    pub len: cty::c_uint,
}
impl Default for bolos_ux_params_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type bolos_ux_params_t = bolos_ux_params_s;
extern "C" {
    pub fn os_ux(params: *mut bolos_ux_params_t) -> cty::c_uint;
}
extern "C" {
    pub fn os_ux_result(params: *mut bolos_ux_params_t);
}
extern "C" {
    pub fn os_ux_blocking(params: *mut bolos_ux_params_t) -> cty::c_uint;
}
extern "C" {
    pub static mut G_io_seproxyhal_spi_buffer: [cty::c_uchar; 300usize];
}
extern "C" {
    pub fn io_seph_send(buffer: *const cty::c_uchar, length: cty::c_ushort);
}
extern "C" {
    pub fn io_seph_is_status_sent() -> cty::c_uint;
}
extern "C" {
    pub fn io_seph_recv(
        buffer: *mut cty::c_uchar,
        maxlength: cty::c_ushort,
        flags: cty::c_uint,
    ) -> cty::c_ushort;
}
extern "C" {
    pub fn io_seph_init();
}
extern "C" {
    pub fn io_seproxyhal_init();
}
extern "C" {
    pub fn io_seproxyhal_init_ux();
}
extern "C" {
    pub fn io_seproxyhal_init_button();
}
extern "C" {
    pub fn io_exchange_al(channel_and_flags: cty::c_uchar, tx_len: cty::c_ushort) -> cty::c_ushort;
}
extern "C" {
    pub fn os_io_seproxyhal_get_app_name_and_version() -> cty::c_uint;
}
extern "C" {
    pub fn USB_power(enabled: cty::c_uchar);
}
extern "C" {
    pub fn io_seproxyhal_handle_usb_event();
}
extern "C" {
    pub fn io_seproxyhal_handle_usb_ep_xfer_event();
}
extern "C" {
    pub fn io_seproxyhal_get_ep_rx_size(epnum: u8) -> u16;
}
extern "C" {
    pub fn io_seproxyhal_handle_event() -> cty::c_uint;
}
extern "C" {
    pub fn io_seproxyhal_general_status();
}
extern "C" {
    pub fn os_io_seproxyhal_general_status_processing();
}
extern "C" {
    pub fn io_usb_send_apdu_data(buffer: *mut cty::c_uchar, length: cty::c_ushort);
}
extern "C" {
    pub fn io_usb_send_apdu_data_ep0x83(buffer: *mut cty::c_uchar, length: cty::c_ushort);
}
extern "C" {
    pub fn io_usb_send_ep(
        ep: cty::c_uint,
        buffer: *mut cty::c_uchar,
        length: cty::c_ushort,
        timeout: cty::c_uint,
    );
}
extern "C" {
    pub fn io_usb_ccid_reply(buffer: *mut cty::c_uchar, length: cty::c_ushort);
}
extern "C" {
    pub fn io_set_timeout(timeout: cty::c_uint);
}
pub const APDU_IDLE: io_apdu_state_e = 0;
pub const APDU_BLE: io_apdu_state_e = 1;
pub const APDU_BLE_WAIT_NOTIFY: io_apdu_state_e = 2;
pub const APDU_NFC_M24SR: io_apdu_state_e = 3;
pub const APDU_NFC_M24SR_SELECT: io_apdu_state_e = 4;
pub const APDU_NFC_M24SR_FIRST: io_apdu_state_e = 5;
pub const APDU_NFC_M24SR_RAPDU: io_apdu_state_e = 6;
pub const APDU_USB_HID: io_apdu_state_e = 7;
pub const APDU_USB_CCID: io_apdu_state_e = 8;
pub const APDU_U2F: io_apdu_state_e = 9;
pub const APDU_RAW: io_apdu_state_e = 10;
pub const APDU_USB_WEBUSB: io_apdu_state_e = 11;
pub type io_apdu_state_e = cty::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_seph_s {
    pub apdu_state: io_apdu_state_e,
    pub apdu_length: cty::c_ushort,
    pub io_flags: cty::c_ushort,
    pub apdu_media: io_apdu_media_t,
    pub ms: cty::c_uint,
    pub usb_ep_xfer_len: [cty::c_uchar; 6usize],
    pub usb_ep_timeouts: [io_seph_s__bindgen_ty_1; 6usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct io_seph_s__bindgen_ty_1 {
    pub timeout: cty::c_ushort,
}
impl Default for io_seph_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type io_seph_app_t = io_seph_s;
extern "C" {
    pub static mut G_io_app: io_seph_app_t;
}
extern "C" {
    pub fn io_seproxyhal_setup_ticker(interval_ms: cty::c_uint);
}
extern "C" {
    pub fn io_seproxyhal_power_off();
}
extern "C" {
    pub fn io_seproxyhal_se_reset();
}
extern "C" {
    pub fn io_seproxyhal_disable_io();
}
extern "C" {
    pub fn io_seproxyhal_io_heartbeat();
}
extern "C" {
    pub fn os_io_seph_recv_and_process(dont_process_ux_events: cty::c_uint) -> cty::c_uint;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cx_aes_key_s {
    pub size: size_t,
    pub keys: [u8; 32usize],
}
pub type cx_aes_key_t = cx_aes_key_s;
extern "C" {
    pub fn cx_aes_set_key_hw(key: *const cx_aes_key_t, mode: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_aes_reset_hw();
}
extern "C" {
    pub fn cx_aes_block_hw(inblock: *const cty::c_uchar, outblock: *mut cty::c_uchar) -> cx_err_t;
}
extern "C" {
    pub fn cx_crc32_hw(buf: *const cty::c_void, len: size_t) -> u32;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct cx_des_key_s {
    pub size: u8,
    pub keys: [u8; 24usize],
}
pub type cx_des_key_t = cx_des_key_s;
extern "C" {
    pub fn cx_des_set_key_hw(keys: *const cx_des_key_t, mode: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_des_reset_hw();
}
extern "C" {
    pub fn cx_des_block_hw(inblock: *const cty::c_uchar, outblock: *mut cty::c_uchar);
}
extern "C" {
    pub fn cx_trng_get_random_data(buf: *mut u8, size: size_t);
}
extern "C" {
    pub fn cx_trng_selftest();
}
extern "C" {
    pub fn cx_trng_init();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_ripemd160_s {
    pub header: cx_hash_header_s,
    pub blen: size_t,
    pub block: [u8; 64usize],
    pub acc: [u8; 20usize],
}
impl Default for cx_ripemd160_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_ripemd160_t = cx_ripemd160_s;
extern "C" {
    pub fn cx_ripemd160_init_no_throw(hash: *mut cx_ripemd160_t) -> cx_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_sha256_s {
    pub header: cx_hash_header_s,
    pub blen: size_t,
    pub block: [u8; 64usize],
    pub acc: [u8; 32usize],
}
impl Default for cx_sha256_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_sha256_t = cx_sha256_s;
extern "C" {
    pub fn cx_sha224_init_no_throw(hash: *mut cx_sha256_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_sha256_init_no_throw(hash: *mut cx_sha256_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_hash_sha256(in_: *const u8, len: size_t, out: *mut u8, out_len: size_t) -> size_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_sha512_s {
    pub header: cx_hash_header_s,
    pub blen: size_t,
    pub block: [u8; 128usize],
    pub acc: [u8; 64usize],
}
impl Default for cx_sha512_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_sha512_t = cx_sha512_s;
extern "C" {
    pub fn cx_sha384_init_no_throw(hash: *mut cx_sha512_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_sha512_init_no_throw(hash: *mut cx_sha512_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_hash_sha512(in_: *const u8, in_len: size_t, out: *mut u8, out_len: size_t) -> size_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_sha3_s {
    pub header: cx_hash_header_s,
    pub output_size: size_t,
    pub block_size: size_t,
    pub blen: size_t,
    pub block: [u8; 200usize],
    pub acc: [uint64bits_t; 25usize],
}
impl Default for cx_sha3_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_sha3_t = cx_sha3_s;
extern "C" {
    pub fn cx_sha3_init_no_throw(hash: *mut cx_sha3_t, size: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_keccak_init_no_throw(hash: *mut cx_sha3_t, size: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_shake128_init_no_throw(hash: *mut cx_sha3_t, out_size: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_shake256_init_no_throw(hash: *mut cx_sha3_t, out_size: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_sha3_xof_init_no_throw(
        hash: *mut cx_sha3_t,
        size: size_t,
        out_length: size_t,
    ) -> cx_err_t;
}
pub const BLAKE2B_BLOCKBYTES: blake2b_constant = 128;
pub const BLAKE2B_OUTBYTES: blake2b_constant = 64;
pub const BLAKE2B_KEYBYTES: blake2b_constant = 64;
pub const BLAKE2B_SALTBYTES: blake2b_constant = 16;
pub const BLAKE2B_PERSONALBYTES: blake2b_constant = 16;
pub type blake2b_constant = cty::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct blake2b_state__ {
    pub h: [u64; 8usize],
    pub t: [u64; 2usize],
    pub f: [u64; 2usize],
    pub buf: [u8; 128usize],
    pub buflen: size_t,
    pub outlen: size_t,
    pub last_node: u8,
}
impl Default for blake2b_state__ {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type blake2b_state = blake2b_state__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_blake2b_s {
    pub header: cx_hash_header_s,
    pub output_size: size_t,
    pub ctx: blake2b_state__,
}
impl Default for cx_blake2b_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_blake2b_t = cx_blake2b_s;
extern "C" {
    pub fn cx_blake2b_init_no_throw(hash: *mut cx_blake2b_t, out_len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_blake2b_init2_no_throw(
        hash: *mut cx_blake2b_t,
        out_len: size_t,
        salt: *mut u8,
        salt_len: size_t,
        perso: *mut u8,
        perso_len: size_t,
    ) -> cx_err_t;
}
pub type BitSequence = cty::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hashState_s {
    pub chaining: [[u8; 16usize]; 8usize],
    pub block_counter: u64,
    pub hashlen: cty::c_uint,
    pub buffer: [BitSequence; 128usize],
    pub buf_ptr: cty::c_uint,
    pub columns: cty::c_uint,
    pub rounds: cty::c_uint,
    pub statesize: cty::c_uint,
}
impl Default for hashState_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type hashState = hashState_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_groestl_s {
    pub header: cx_hash_header_s,
    pub output_size: cty::c_uint,
    pub ctx: hashState_s,
}
impl Default for cx_groestl_s {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type cx_groestl_t = cx_groestl_s;
extern "C" {
    pub fn cx_groestl_init_no_throw(hash: *mut cx_groestl_t, size: size_t) -> cx_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_hmac_t {
    pub key: [u8; 128usize],
    pub hash_ctx: cx_hash_t,
}
impl Default for cx_hmac_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_hmac_ripemd160_t {
    pub key: [u8; 128usize],
    pub hash_ctx: cx_ripemd160_t,
}
impl Default for cx_hmac_ripemd160_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    pub fn cx_hmac_ripemd160_init_no_throw(
        hmac: *mut cx_hmac_ripemd160_t,
        key: *const u8,
        key_len: size_t,
    ) -> cx_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_hmac_sha256_t {
    pub key: [u8; 128usize],
    pub hash_ctx: cx_sha256_t,
}
impl Default for cx_hmac_sha256_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    pub fn cx_hmac_sha224_init(
        hmac: *mut cx_hmac_sha256_t,
        key: *const u8,
        key_len: cty::c_uint,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_sha256_init_no_throw(
        hmac: *mut cx_hmac_sha256_t,
        key: *const u8,
        key_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_sha256(
        key: *const u8,
        key_len: size_t,
        in_: *const u8,
        len: size_t,
        mac: *mut u8,
        mac_len: size_t,
    ) -> size_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cx_hmac_sha512_t {
    pub key: [u8; 128usize],
    pub hash_ctx: cx_sha512_t,
}
impl Default for cx_hmac_sha512_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    pub fn cx_hmac_sha384_init(
        hmac: *mut cx_hmac_sha512_t,
        key: *const u8,
        key_len: cty::c_uint,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_sha512_init_no_throw(
        hmac: *mut cx_hmac_sha512_t,
        key: *const u8,
        key_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_sha512(
        key: *const u8,
        key_len: size_t,
        in_: *const u8,
        len: size_t,
        mac: *mut u8,
        mac_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn cx_hmac_no_throw(
        hmac: *mut cx_hmac_t,
        mode: u32,
        in_: *const u8,
        len: size_t,
        mac: *mut u8,
        mac_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_init(
        hmac: *mut cx_hmac_t,
        hash_id: cx_md_t,
        key: *const u8,
        key_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_update(hmac: *mut cx_hmac_t, in_: *const u8, in_len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_hmac_final(ctx: *mut cx_hmac_t, out: *mut u8, out_len: *mut size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_pbkdf2_no_throw(
        md_type: cx_md_t,
        password: *const u8,
        passwordlen: size_t,
        salt: *mut u8,
        saltlen: size_t,
        iterations: u32,
        out: *mut u8,
        outLength: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_rng_no_throw(buffer: *mut u8, len: size_t);
}
extern "C" {
    pub fn cx_rng_u8() -> u8;
}
extern "C" {
    pub fn cx_rng_u32() -> u32;
}
pub type cx_rng_u32_range_randfunc_t = ::core::option::Option<unsafe extern "C" fn() -> u32>;
extern "C" {
    pub fn cx_rng_u32_range_func(a: u32, b: u32, randfunc: cx_rng_u32_range_randfunc_t) -> u32;
}
extern "C" {
    pub fn cx_rng_rfc6979(
        hash_id: cx_md_t,
        x: *const u8,
        x_len: size_t,
        h1: *const u8,
        h1_len: size_t,
        q: *const u8,
        q_len: size_t,
        out: *mut u8,
        out_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_cmp_no_throw(
        a: *const u8,
        b: *const u8,
        length: size_t,
        diff: *mut cty::c_int,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_add_no_throw(r: *mut u8, a: *const u8, b: *const u8, len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_sub_no_throw(r: *mut u8, a: *const u8, b: *const u8, len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_mult_no_throw(r: *mut u8, a: *const u8, b: *const u8, len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_addm_no_throw(
        r: *mut u8,
        a: *const u8,
        b: *const u8,
        m: *const u8,
        len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_subm_no_throw(
        r: *mut u8,
        a: *const u8,
        b: *const u8,
        m: *const u8,
        len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_multm_no_throw(
        r: *mut u8,
        a: *const u8,
        b: *const u8,
        m: *const u8,
        len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_modm_no_throw(
        v: *mut u8,
        len_v: size_t,
        m: *const u8,
        len_m: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_powm_no_throw(
        r: *mut u8,
        a: *const u8,
        e: *const u8,
        len_e: size_t,
        m: *const u8,
        len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_invprimem_no_throw(
        r: *mut u8,
        a: *const u8,
        m: *const u8,
        len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_invintm_no_throw(r: *mut u8, a: u32, m: *const u8, len: size_t) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_is_prime_no_throw(r: *const u8, len: size_t, prime: *mut bool) -> cx_err_t;
}
extern "C" {
    pub fn cx_math_next_prime_no_throw(r: *mut u8, len: u32) -> cx_err_t;
}
extern "C" {
    pub fn cx_des_init_key_no_throw(
        rawkey: *const u8,
        key_len: size_t,
        key: *mut cx_des_key_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_des_iv_no_throw(
        key: *const cx_des_key_t,
        mode: u32,
        iv: *const u8,
        iv_len: size_t,
        in_: *const u8,
        in_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_des_no_throw(
        key: *const cx_des_key_t,
        mode: u32,
        in_: *const u8,
        in_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_des_enc_block(key: *const cx_des_key_t, inblock: *const u8, outblock: *mut u8);
}
extern "C" {
    pub fn cx_des_dec_block(key: *const cx_des_key_t, inblock: *const u8, outblock: *mut u8);
}
extern "C" {
    pub fn cx_aes_init_key_no_throw(
        rawkey: *const u8,
        key_len: size_t,
        key: *mut cx_aes_key_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_aes_iv_no_throw(
        key: *const cx_aes_key_t,
        mode: u32,
        iv: *const u8,
        iv_len: size_t,
        in_: *const u8,
        in_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_aes_no_throw(
        key: *const cx_aes_key_t,
        mode: u32,
        in_: *const u8,
        in_len: size_t,
        out: *mut u8,
        out_len: *mut size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_aes_enc_block(
        key: *const cx_aes_key_t,
        inblock: *const u8,
        outblock: *mut u8,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_aes_dec_block(
        key: *const cx_aes_key_t,
        inblock: *const u8,
        outblock: *mut u8,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdsa_sign_no_throw(
        pvkey: *const cx_ecfp_private_key_t,
        mode: u32,
        hashID: cx_md_t,
        hash: *const u8,
        hash_len: size_t,
        sig: *mut u8,
        sig_len: *mut size_t,
        info: *mut u32,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecdsa_verify_no_throw(
        pukey: *const cx_ecfp_public_key_t,
        hash: *const u8,
        hash_len: size_t,
        sig: *const u8,
        sig_len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn cx_eddsa_sign_no_throw(
        pvkey: *const cx_ecfp_private_key_t,
        hashID: cx_md_t,
        hash: *const u8,
        hash_len: size_t,
        sig: *mut u8,
        sig_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_eddsa_verify_no_throw(
        pukey: *const cx_ecfp_public_key_t,
        hashID: cx_md_t,
        hash: *const u8,
        hash_len: size_t,
        sig: *const u8,
        sig_len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn cx_encode_coord(coord: *mut u8, len: cty::c_int, sign: cty::c_int);
}
extern "C" {
    pub fn cx_decode_coord(coord: *mut u8, len: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn cx_ecschnorr_sign_no_throw(
        pvkey: *const cx_ecfp_private_key_t,
        mode: u32,
        hashID: cx_md_t,
        msg: *const u8,
        msg_len: size_t,
        sig: *mut u8,
        sig_len: *mut size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_ecschnorr_verify(
        pukey: *const cx_ecfp_public_key_t,
        mode: u32,
        hashID: cx_md_t,
        msg: *const u8,
        msg_len: size_t,
        sig: *const u8,
        sig_len: size_t,
    ) -> bool;
}
extern "C" {
    pub fn cx_ecdh_no_throw(
        pvkey: *const cx_ecfp_private_key_t,
        mode: u32,
        P: *const u8,
        P_len: size_t,
        secret: *mut u8,
        secret_len: size_t,
    ) -> cx_err_t;
}
extern "C" {
    pub fn cx_crc16(buffer: *const cty::c_void, len: size_t) -> u16;
}
extern "C" {
    pub fn cx_crc16_update(crc: u16, buffer: *const cty::c_void, len: size_t) -> u16;
}
pub type __builtin_va_list = __va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list {
    pub __ap: *mut cty::c_void,
}
impl Default for __va_list {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
