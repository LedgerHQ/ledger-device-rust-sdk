#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::too_many_arguments)]
/* automatically generated by rust-bindgen 0.57.0 */

pub const IO_HID_EP_LENGTH: u32 = 50;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __NO_LONG_DOUBLE_MATH: u32 = 1;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 32;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 0;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 0;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 36;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 24;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 20;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 0;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const USBD_MAX_NUM_INTERFACES: u32 = 3;
pub const USBD_MAX_NUM_CONFIGURATION: u32 = 1;
pub const USBD_MAX_STR_DESC_SIZ: u32 = 512;
pub const USBD_SUPPORT_USER_STRING: u32 = 0;
pub const USBD_DEBUG_LEVEL: u32 = 0;
pub const USBD_LPM_ENABLED: u32 = 1;
pub const USBD_SELF_POWERED: u32 = 1;
pub const DEVICE_FS: u32 = 0;
pub const USB_LEN_DEV_QUALIFIER_DESC: u32 = 10;
pub const USB_LEN_DEV_DESC: u32 = 18;
pub const USB_LEN_CFG_DESC: u32 = 9;
pub const USB_LEN_IF_DESC: u32 = 9;
pub const USB_LEN_EP_DESC: u32 = 7;
pub const USB_LEN_OTG_DESC: u32 = 3;
pub const USB_LEN_LANGID_STR_DESC: u32 = 4;
pub const USB_LEN_OTHER_SPEED_DESC_SIZ: u32 = 9;
pub const USBD_IDX_LANGID_STR: u32 = 0;
pub const USBD_IDX_MFC_STR: u32 = 1;
pub const USBD_IDX_PRODUCT_STR: u32 = 2;
pub const USBD_IDX_SERIAL_STR: u32 = 3;
pub const USBD_IDX_CONFIG_STR: u32 = 4;
pub const USBD_IDX_INTERFACE_STR: u32 = 5;
pub const USB_REQ_TYPE_STANDARD: u32 = 0;
pub const USB_REQ_TYPE_CLASS: u32 = 32;
pub const USB_REQ_TYPE_VENDOR: u32 = 64;
pub const USB_REQ_TYPE_MASK: u32 = 96;
pub const USB_REQ_RECIPIENT_DEVICE: u32 = 0;
pub const USB_REQ_RECIPIENT_INTERFACE: u32 = 1;
pub const USB_REQ_RECIPIENT_ENDPOINT: u32 = 2;
pub const USB_REQ_RECIPIENT_MASK: u32 = 3;
pub const USB_REQ_GET_STATUS: u32 = 0;
pub const USB_REQ_CLEAR_FEATURE: u32 = 1;
pub const USB_REQ_SET_FEATURE: u32 = 3;
pub const USB_REQ_SET_ADDRESS: u32 = 5;
pub const USB_REQ_GET_DESCRIPTOR: u32 = 6;
pub const USB_REQ_SET_DESCRIPTOR: u32 = 7;
pub const USB_REQ_GET_CONFIGURATION: u32 = 8;
pub const USB_REQ_SET_CONFIGURATION: u32 = 9;
pub const USB_REQ_GET_INTERFACE: u32 = 10;
pub const USB_REQ_SET_INTERFACE: u32 = 11;
pub const USB_REQ_SYNCH_FRAME: u32 = 12;
pub const USB_DESC_TYPE_DEVICE: u32 = 1;
pub const USB_DESC_TYPE_CONFIGURATION: u32 = 2;
pub const USB_DESC_TYPE_STRING: u32 = 3;
pub const USB_DESC_TYPE_INTERFACE: u32 = 4;
pub const USB_DESC_TYPE_ENDPOINT: u32 = 5;
pub const USB_DESC_TYPE_DEVICE_QUALIFIER: u32 = 6;
pub const USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION: u32 = 7;
pub const USB_DESC_TYPE_BOS: u32 = 15;
pub const USB_CONFIG_REMOTE_WAKEUP: u32 = 2;
pub const USB_CONFIG_SELF_POWERED: u32 = 1;
pub const USB_FEATURE_EP_HALT: u32 = 0;
pub const USB_FEATURE_REMOTE_WAKEUP: u32 = 1;
pub const USB_FEATURE_TEST_MODE: u32 = 2;
pub const USB_DEVICE_CAPABITY_TYPE: u32 = 16;
pub const USB_HS_MAX_PACKET_SIZE: u32 = 512;
pub const USB_FS_MAX_PACKET_SIZE: u32 = 64;
pub const USB_MAX_EP0_SIZE: u32 = 64;
pub const USBD_STATE_DEFAULT: u32 = 1;
pub const USBD_STATE_ADDRESSED: u32 = 2;
pub const USBD_STATE_CONFIGURED: u32 = 3;
pub const USBD_STATE_SUSPENDED: u32 = 4;
pub const USBD_EP0_IDLE: u32 = 0;
pub const USBD_EP0_SETUP: u32 = 1;
pub const USBD_EP0_DATA_IN: u32 = 2;
pub const USBD_EP0_DATA_OUT: u32 = 3;
pub const USBD_EP0_STATUS_IN: u32 = 4;
pub const USBD_EP0_STATUS_OUT: u32 = 5;
pub const USBD_EP0_STALL: u32 = 6;
pub const USBD_EP_TYPE_CTRL: u32 = 0;
pub const USBD_EP_TYPE_ISOC: u32 = 1;
pub const USBD_EP_TYPE_BULK: u32 = 2;
pub const USBD_EP_TYPE_INTR: u32 = 3;
extern "C" {
    pub fn USBD_static_malloc(size: u32) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn USBD_static_free(p: *mut core::ffi::c_void);
}
extern "C" {
    pub fn USB_power(enabled: core::ffi::c_uchar);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct usb_setup_req {
    pub bmRequest: u8,
    pub bRequest: u8,
    pub wValue: u16,
    pub wIndex: u16,
    pub wLength: u16,
}
pub type USBD_SetupReqTypedef = usb_setup_req;
pub type Init_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, cfgidx: u8) -> u8>;
pub type DeInit_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, cfgidx: u8) -> u8>;
pub type Setup_t = ::core::option::Option<
    unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, req: *mut USBD_SetupReqTypedef) -> u8,
>;
pub type EP0_TxSent_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef) -> u8>;
pub type EP0_RxReady_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef) -> u8>;
pub type DataIn_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8) -> u8>;
pub type DataOut_t = ::core::option::Option<
    unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8, pData: *mut u8) -> u8,
>;
pub type SOF_t = ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef) -> u8>;
pub type IsoINIncomplete_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8) -> u8>;
pub type IsoOUTIncomplete_t =
    ::core::option::Option<unsafe extern "C" fn(pdev: *mut _USBD_HandleTypeDef, epnum: u8) -> u8>;
pub type GetHSConfigDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
pub type GetFSConfigDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
pub type GetOtherSpeedConfigDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
pub type GetDeviceQualifierDescriptor_t =
    ::core::option::Option<unsafe extern "C" fn(length: *mut u16) -> *mut u8>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct _Device_cb {
    pub Init: Init_t,
    pub DeInit: DeInit_t,
    pub Setup: Setup_t,
    pub EP0_TxSent: EP0_TxSent_t,
    pub EP0_RxReady: EP0_RxReady_t,
    pub DataIn: DataIn_t,
    pub DataOut: DataOut_t,
    pub SOF: SOF_t,
    pub IsoINIncomplete: IsoINIncomplete_t,
    pub IsoOUTIncomplete: IsoOUTIncomplete_t,
    pub GetHSConfigDescriptor: GetHSConfigDescriptor_t,
    pub GetFSConfigDescriptor: GetFSConfigDescriptor_t,
    pub GetOtherSpeedConfigDescriptor: GetOtherSpeedConfigDescriptor_t,
    pub GetDeviceQualifierDescriptor: GetDeviceQualifierDescriptor_t,
}
pub type USBD_ClassTypeDef = _Device_cb;
pub const USBD_SPEED_HIGH: USBD_SpeedTypeDef = 0;
pub const USBD_SPEED_FULL: USBD_SpeedTypeDef = 1;
pub const USBD_SPEED_LOW: USBD_SpeedTypeDef = 2;
pub type USBD_SpeedTypeDef = core::ffi::c_uchar;
pub const USBD_OK: USBD_StatusTypeDef = 0;
pub const USBD_BUSY: USBD_StatusTypeDef = 1;
pub const USBD_FAIL: USBD_StatusTypeDef = 2;
pub type USBD_StatusTypeDef = core::ffi::c_uchar;
pub type GetDeviceDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetLangIDStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetManufacturerStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetProductStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetSerialStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetConfigurationStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetInterfaceStrDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
pub type GetBOSDescriptor_t = ::core::option::Option<
    unsafe extern "C" fn(speed: USBD_SpeedTypeDef, length: *mut u16) -> *mut u8,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct USBD_DescriptorsTypeDef {
    pub GetDeviceDescriptor: GetDeviceDescriptor_t,
    pub GetLangIDStrDescriptor: GetLangIDStrDescriptor_t,
    pub GetManufacturerStrDescriptor: GetManufacturerStrDescriptor_t,
    pub GetProductStrDescriptor: GetProductStrDescriptor_t,
    pub GetSerialStrDescriptor: GetSerialStrDescriptor_t,
    pub GetConfigurationStrDescriptor: GetConfigurationStrDescriptor_t,
    pub GetInterfaceStrDescriptor: GetInterfaceStrDescriptor_t,
    pub GetBOSDescriptor: GetBOSDescriptor_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct USBD_EndpointTypeDef {
    pub status: u32,
    pub total_length: u32,
    pub rem_length: u32,
    pub maxpacket: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _USBD_HandleTypeDef {
    pub id: u8,
    pub dev_config: u32,
    pub dev_default_config: u32,
    pub dev_config_status: u32,
    pub dev_speed: USBD_SpeedTypeDef,
    pub ep_in: [USBD_EndpointTypeDef; 6usize],
    pub ep_out: [USBD_EndpointTypeDef; 6usize],
    pub ep0_state: u32,
    pub ep0_data_len: u32,
    pub dev_state: u8,
    pub dev_old_state: u8,
    pub dev_address: u8,
    pub dev_connection_status: u8,
    pub dev_test_mode: u8,
    pub dev_remote_wakeup: u32,
    pub request: USBD_SetupReqTypedef,
    pub pDesc: *mut USBD_DescriptorsTypeDef,
    pub interfacesClass: [_USBD_HandleTypeDef__bindgen_ty_1; 3usize],
    pub pUserData: *mut core::ffi::c_void,
    pub pData: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _USBD_HandleTypeDef__bindgen_ty_1 {
    pub pClass: *mut USBD_ClassTypeDef,
    pub pClassData: *mut core::ffi::c_void,
}
impl Default for _USBD_HandleTypeDef__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
impl Default for _USBD_HandleTypeDef {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type USBD_HandleTypeDef = _USBD_HandleTypeDef;
pub type __builtin_va_list = __va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list {
    pub __ap: *mut core::ffi::c_void,
}
impl Default for __va_list {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
